// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kythe/proto/xref.proto

/*
Package xref_go_proto is a generated protocol buffer package.

It is generated from these files:
	kythe/proto/xref.proto

It has these top-level messages:
	Location
	DecorationsRequest
	DecorationsReply
	CrossReferencesRequest
	Anchor
	Printable
	CrossReferencesReply
	DocumentationRequest
	DocumentationReply
*/
package xref_go_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import kythe_proto_common "kythe.io/kythe/proto/common_go_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SnippetsKind int32

const (
	SnippetsKind_NONE    SnippetsKind = 0
	SnippetsKind_DEFAULT SnippetsKind = 1
)

var SnippetsKind_name = map[int32]string{
	0: "NONE",
	1: "DEFAULT",
}
var SnippetsKind_value = map[string]int32{
	"NONE":    0,
	"DEFAULT": 1,
}

func (x SnippetsKind) String() string {
	return proto.EnumName(SnippetsKind_name, int32(x))
}
func (SnippetsKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Location_Kind int32

const (
	Location_FILE Location_Kind = 0
	Location_SPAN Location_Kind = 1
)

var Location_Kind_name = map[int32]string{
	0: "FILE",
	1: "SPAN",
}
var Location_Kind_value = map[string]int32{
	"FILE": 0,
	"SPAN": 1,
}

func (x Location_Kind) String() string {
	return proto.EnumName(Location_Kind_name, int32(x))
}
func (Location_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type DecorationsRequest_SpanKind int32

const (
	DecorationsRequest_WITHIN_SPAN DecorationsRequest_SpanKind = 0
	DecorationsRequest_AROUND_SPAN DecorationsRequest_SpanKind = 1
)

var DecorationsRequest_SpanKind_name = map[int32]string{
	0: "WITHIN_SPAN",
	1: "AROUND_SPAN",
}
var DecorationsRequest_SpanKind_value = map[string]int32{
	"WITHIN_SPAN": 0,
	"AROUND_SPAN": 1,
}

func (x DecorationsRequest_SpanKind) String() string {
	return proto.EnumName(DecorationsRequest_SpanKind_name, int32(x))
}
func (DecorationsRequest_SpanKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

type DecorationsReply_Override_Kind int32

const (
	DecorationsReply_Override_OVERRIDES DecorationsReply_Override_Kind = 0
	DecorationsReply_Override_EXTENDS   DecorationsReply_Override_Kind = 1
)

var DecorationsReply_Override_Kind_name = map[int32]string{
	0: "OVERRIDES",
	1: "EXTENDS",
}
var DecorationsReply_Override_Kind_value = map[string]int32{
	"OVERRIDES": 0,
	"EXTENDS":   1,
}

func (x DecorationsReply_Override_Kind) String() string {
	return proto.EnumName(DecorationsReply_Override_Kind_name, int32(x))
}
func (DecorationsReply_Override_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1, 0}
}

type CrossReferencesRequest_DefinitionKind int32

const (
	CrossReferencesRequest_NO_DEFINITIONS      CrossReferencesRequest_DefinitionKind = 0
	CrossReferencesRequest_ALL_DEFINITIONS     CrossReferencesRequest_DefinitionKind = 1
	CrossReferencesRequest_FULL_DEFINITIONS    CrossReferencesRequest_DefinitionKind = 2
	CrossReferencesRequest_BINDING_DEFINITIONS CrossReferencesRequest_DefinitionKind = 3
)

var CrossReferencesRequest_DefinitionKind_name = map[int32]string{
	0: "NO_DEFINITIONS",
	1: "ALL_DEFINITIONS",
	2: "FULL_DEFINITIONS",
	3: "BINDING_DEFINITIONS",
}
var CrossReferencesRequest_DefinitionKind_value = map[string]int32{
	"NO_DEFINITIONS":      0,
	"ALL_DEFINITIONS":     1,
	"FULL_DEFINITIONS":    2,
	"BINDING_DEFINITIONS": 3,
}

func (x CrossReferencesRequest_DefinitionKind) String() string {
	return proto.EnumName(CrossReferencesRequest_DefinitionKind_name, int32(x))
}
func (CrossReferencesRequest_DefinitionKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type CrossReferencesRequest_DeclarationKind int32

const (
	CrossReferencesRequest_NO_DECLARATIONS  CrossReferencesRequest_DeclarationKind = 0
	CrossReferencesRequest_ALL_DECLARATIONS CrossReferencesRequest_DeclarationKind = 1
)

var CrossReferencesRequest_DeclarationKind_name = map[int32]string{
	0: "NO_DECLARATIONS",
	1: "ALL_DECLARATIONS",
}
var CrossReferencesRequest_DeclarationKind_value = map[string]int32{
	"NO_DECLARATIONS":  0,
	"ALL_DECLARATIONS": 1,
}

func (x CrossReferencesRequest_DeclarationKind) String() string {
	return proto.EnumName(CrossReferencesRequest_DeclarationKind_name, int32(x))
}
func (CrossReferencesRequest_DeclarationKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 1}
}

type CrossReferencesRequest_ReferenceKind int32

const (
	CrossReferencesRequest_NO_REFERENCES       CrossReferencesRequest_ReferenceKind = 0
	CrossReferencesRequest_CALL_REFERENCES     CrossReferencesRequest_ReferenceKind = 1
	CrossReferencesRequest_NON_CALL_REFERENCES CrossReferencesRequest_ReferenceKind = 2
	CrossReferencesRequest_ALL_REFERENCES      CrossReferencesRequest_ReferenceKind = 3
)

var CrossReferencesRequest_ReferenceKind_name = map[int32]string{
	0: "NO_REFERENCES",
	1: "CALL_REFERENCES",
	2: "NON_CALL_REFERENCES",
	3: "ALL_REFERENCES",
}
var CrossReferencesRequest_ReferenceKind_value = map[string]int32{
	"NO_REFERENCES":       0,
	"CALL_REFERENCES":     1,
	"NON_CALL_REFERENCES": 2,
	"ALL_REFERENCES":      3,
}

func (x CrossReferencesRequest_ReferenceKind) String() string {
	return proto.EnumName(CrossReferencesRequest_ReferenceKind_name, int32(x))
}
func (CrossReferencesRequest_ReferenceKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 2}
}

type CrossReferencesRequest_CallerKind int32

const (
	CrossReferencesRequest_NO_CALLERS       CrossReferencesRequest_CallerKind = 0
	CrossReferencesRequest_DIRECT_CALLERS   CrossReferencesRequest_CallerKind = 1
	CrossReferencesRequest_OVERRIDE_CALLERS CrossReferencesRequest_CallerKind = 2
)

var CrossReferencesRequest_CallerKind_name = map[int32]string{
	0: "NO_CALLERS",
	1: "DIRECT_CALLERS",
	2: "OVERRIDE_CALLERS",
}
var CrossReferencesRequest_CallerKind_value = map[string]int32{
	"NO_CALLERS":       0,
	"DIRECT_CALLERS":   1,
	"OVERRIDE_CALLERS": 2,
}

func (x CrossReferencesRequest_CallerKind) String() string {
	return proto.EnumName(CrossReferencesRequest_CallerKind_name, int32(x))
}
func (CrossReferencesRequest_CallerKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 3}
}

type Location struct {
	Ticket string                   `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Kind   Location_Kind            `protobuf:"varint,2,opt,name=kind,enum=kythe.proto.Location_Kind" json:"kind,omitempty"`
	Span   *kythe_proto_common.Span `protobuf:"bytes,5,opt,name=span" json:"span,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Location) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Location) GetKind() Location_Kind {
	if m != nil {
		return m.Kind
	}
	return Location_FILE
}

func (m *Location) GetSpan() *kythe_proto_common.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type DecorationsRequest struct {
	Location          *Location                   `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	SpanKind          DecorationsRequest_SpanKind `protobuf:"varint,10,opt,name=span_kind,json=spanKind,enum=kythe.proto.DecorationsRequest_SpanKind" json:"span_kind,omitempty"`
	DirtyBuffer       []byte                      `protobuf:"bytes,2,opt,name=dirty_buffer,json=dirtyBuffer,proto3" json:"dirty_buffer,omitempty"`
	SourceText        bool                        `protobuf:"varint,3,opt,name=source_text,json=sourceText" json:"source_text,omitempty"`
	References        bool                        `protobuf:"varint,4,opt,name=references" json:"references,omitempty"`
	TargetDefinitions bool                        `protobuf:"varint,6,opt,name=target_definitions,json=targetDefinitions" json:"target_definitions,omitempty"`
	Filter            []string                    `protobuf:"bytes,5,rep,name=filter" json:"filter,omitempty"`
	ExtendsOverrides  bool                        `protobuf:"varint,7,opt,name=extends_overrides,json=extendsOverrides" json:"extends_overrides,omitempty"`
	Diagnostics       bool                        `protobuf:"varint,8,opt,name=diagnostics" json:"diagnostics,omitempty"`
	Snippets          SnippetsKind                `protobuf:"varint,9,opt,name=snippets,enum=kythe.proto.SnippetsKind" json:"snippets,omitempty"`
}

func (m *DecorationsRequest) Reset()                    { *m = DecorationsRequest{} }
func (m *DecorationsRequest) String() string            { return proto.CompactTextString(m) }
func (*DecorationsRequest) ProtoMessage()               {}
func (*DecorationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DecorationsRequest) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *DecorationsRequest) GetSpanKind() DecorationsRequest_SpanKind {
	if m != nil {
		return m.SpanKind
	}
	return DecorationsRequest_WITHIN_SPAN
}

func (m *DecorationsRequest) GetDirtyBuffer() []byte {
	if m != nil {
		return m.DirtyBuffer
	}
	return nil
}

func (m *DecorationsRequest) GetSourceText() bool {
	if m != nil {
		return m.SourceText
	}
	return false
}

func (m *DecorationsRequest) GetReferences() bool {
	if m != nil {
		return m.References
	}
	return false
}

func (m *DecorationsRequest) GetTargetDefinitions() bool {
	if m != nil {
		return m.TargetDefinitions
	}
	return false
}

func (m *DecorationsRequest) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *DecorationsRequest) GetExtendsOverrides() bool {
	if m != nil {
		return m.ExtendsOverrides
	}
	return false
}

func (m *DecorationsRequest) GetDiagnostics() bool {
	if m != nil {
		return m.Diagnostics
	}
	return false
}

func (m *DecorationsRequest) GetSnippets() SnippetsKind {
	if m != nil {
		return m.Snippets
	}
	return SnippetsKind_NONE
}

type DecorationsReply struct {
	Location            *Location                               `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	SourceText          []byte                                  `protobuf:"bytes,2,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	Encoding            string                                  `protobuf:"bytes,3,opt,name=encoding" json:"encoding,omitempty"`
	Reference           []*DecorationsReply_Reference           `protobuf:"bytes,4,rep,name=reference" json:"reference,omitempty"`
	Diagnostic          []*kythe_proto_common.Diagnostic        `protobuf:"bytes,5,rep,name=diagnostic" json:"diagnostic,omitempty"`
	Nodes               map[string]*kythe_proto_common.NodeInfo `protobuf:"bytes,15,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DefinitionLocations map[string]*Anchor                      `protobuf:"bytes,16,rep,name=definition_locations,json=definitionLocations" json:"definition_locations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExtendsOverrides    map[string]*DecorationsReply_Overrides  `protobuf:"bytes,17,rep,name=extends_overrides,json=extendsOverrides" json:"extends_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DecorationsReply) Reset()                    { *m = DecorationsReply{} }
func (m *DecorationsReply) String() string            { return proto.CompactTextString(m) }
func (*DecorationsReply) ProtoMessage()               {}
func (*DecorationsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DecorationsReply) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *DecorationsReply) GetSourceText() []byte {
	if m != nil {
		return m.SourceText
	}
	return nil
}

func (m *DecorationsReply) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *DecorationsReply) GetReference() []*DecorationsReply_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *DecorationsReply) GetDiagnostic() []*kythe_proto_common.Diagnostic {
	if m != nil {
		return m.Diagnostic
	}
	return nil
}

func (m *DecorationsReply) GetNodes() map[string]*kythe_proto_common.NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DecorationsReply) GetDefinitionLocations() map[string]*Anchor {
	if m != nil {
		return m.DefinitionLocations
	}
	return nil
}

func (m *DecorationsReply) GetExtendsOverrides() map[string]*DecorationsReply_Overrides {
	if m != nil {
		return m.ExtendsOverrides
	}
	return nil
}

type DecorationsReply_Reference struct {
	TargetTicket     string                   `protobuf:"bytes,2,opt,name=target_ticket,json=targetTicket" json:"target_ticket,omitempty"`
	Kind             string                   `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	TargetDefinition string                   `protobuf:"bytes,4,opt,name=target_definition,json=targetDefinition" json:"target_definition,omitempty"`
	Span             *kythe_proto_common.Span `protobuf:"bytes,5,opt,name=span" json:"span,omitempty"`
}

func (m *DecorationsReply_Reference) Reset()                    { *m = DecorationsReply_Reference{} }
func (m *DecorationsReply_Reference) String() string            { return proto.CompactTextString(m) }
func (*DecorationsReply_Reference) ProtoMessage()               {}
func (*DecorationsReply_Reference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *DecorationsReply_Reference) GetTargetTicket() string {
	if m != nil {
		return m.TargetTicket
	}
	return ""
}

func (m *DecorationsReply_Reference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *DecorationsReply_Reference) GetTargetDefinition() string {
	if m != nil {
		return m.TargetDefinition
	}
	return ""
}

func (m *DecorationsReply_Reference) GetSpan() *kythe_proto_common.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type DecorationsReply_Override struct {
	Target           string                           `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	TargetDefinition string                           `protobuf:"bytes,5,opt,name=target_definition,json=targetDefinition" json:"target_definition,omitempty"`
	Kind             DecorationsReply_Override_Kind   `protobuf:"varint,2,opt,name=kind,enum=kythe.proto.DecorationsReply_Override_Kind" json:"kind,omitempty"`
	MarkedSource     *kythe_proto_common.MarkedSource `protobuf:"bytes,4,opt,name=marked_source,json=markedSource" json:"marked_source,omitempty"`
}

func (m *DecorationsReply_Override) Reset()                    { *m = DecorationsReply_Override{} }
func (m *DecorationsReply_Override) String() string            { return proto.CompactTextString(m) }
func (*DecorationsReply_Override) ProtoMessage()               {}
func (*DecorationsReply_Override) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *DecorationsReply_Override) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *DecorationsReply_Override) GetTargetDefinition() string {
	if m != nil {
		return m.TargetDefinition
	}
	return ""
}

func (m *DecorationsReply_Override) GetKind() DecorationsReply_Override_Kind {
	if m != nil {
		return m.Kind
	}
	return DecorationsReply_Override_OVERRIDES
}

func (m *DecorationsReply_Override) GetMarkedSource() *kythe_proto_common.MarkedSource {
	if m != nil {
		return m.MarkedSource
	}
	return nil
}

type DecorationsReply_Overrides struct {
	Override []*DecorationsReply_Override `protobuf:"bytes,1,rep,name=override" json:"override,omitempty"`
}

func (m *DecorationsReply_Overrides) Reset()                    { *m = DecorationsReply_Overrides{} }
func (m *DecorationsReply_Overrides) String() string            { return proto.CompactTextString(m) }
func (*DecorationsReply_Overrides) ProtoMessage()               {}
func (*DecorationsReply_Overrides) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 2} }

func (m *DecorationsReply_Overrides) GetOverride() []*DecorationsReply_Override {
	if m != nil {
		return m.Override
	}
	return nil
}

type CrossReferencesRequest struct {
	Ticket          []string                               `protobuf:"bytes,1,rep,name=ticket" json:"ticket,omitempty"`
	DefinitionKind  CrossReferencesRequest_DefinitionKind  `protobuf:"varint,2,opt,name=definition_kind,json=definitionKind,enum=kythe.proto.CrossReferencesRequest_DefinitionKind" json:"definition_kind,omitempty"`
	DeclarationKind CrossReferencesRequest_DeclarationKind `protobuf:"varint,7,opt,name=declaration_kind,json=declarationKind,enum=kythe.proto.CrossReferencesRequest_DeclarationKind" json:"declaration_kind,omitempty"`
	ReferenceKind   CrossReferencesRequest_ReferenceKind   `protobuf:"varint,3,opt,name=reference_kind,json=referenceKind,enum=kythe.proto.CrossReferencesRequest_ReferenceKind" json:"reference_kind,omitempty"`
	CallerKind      CrossReferencesRequest_CallerKind      `protobuf:"varint,12,opt,name=caller_kind,json=callerKind,enum=kythe.proto.CrossReferencesRequest_CallerKind" json:"caller_kind,omitempty"`
	Filter          []string                               `protobuf:"bytes,5,rep,name=filter" json:"filter,omitempty"`
	RelatedNodeKind []string                               `protobuf:"bytes,14,rep,name=related_node_kind,json=relatedNodeKind" json:"related_node_kind,omitempty"`
	AnchorText      bool                                   `protobuf:"varint,6,opt,name=anchor_text,json=anchorText" json:"anchor_text,omitempty"`
	NodeDefinitions bool                                   `protobuf:"varint,8,opt,name=node_definitions,json=nodeDefinitions" json:"node_definitions,omitempty"`
	PageSize        int32                                  `protobuf:"varint,10,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageToken       string                                 `protobuf:"bytes,11,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Snippets        SnippetsKind                           `protobuf:"varint,13,opt,name=snippets,enum=kythe.proto.SnippetsKind" json:"snippets,omitempty"`
}

func (m *CrossReferencesRequest) Reset()                    { *m = CrossReferencesRequest{} }
func (m *CrossReferencesRequest) String() string            { return proto.CompactTextString(m) }
func (*CrossReferencesRequest) ProtoMessage()               {}
func (*CrossReferencesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CrossReferencesRequest) GetTicket() []string {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *CrossReferencesRequest) GetDefinitionKind() CrossReferencesRequest_DefinitionKind {
	if m != nil {
		return m.DefinitionKind
	}
	return CrossReferencesRequest_NO_DEFINITIONS
}

func (m *CrossReferencesRequest) GetDeclarationKind() CrossReferencesRequest_DeclarationKind {
	if m != nil {
		return m.DeclarationKind
	}
	return CrossReferencesRequest_NO_DECLARATIONS
}

func (m *CrossReferencesRequest) GetReferenceKind() CrossReferencesRequest_ReferenceKind {
	if m != nil {
		return m.ReferenceKind
	}
	return CrossReferencesRequest_NO_REFERENCES
}

func (m *CrossReferencesRequest) GetCallerKind() CrossReferencesRequest_CallerKind {
	if m != nil {
		return m.CallerKind
	}
	return CrossReferencesRequest_NO_CALLERS
}

func (m *CrossReferencesRequest) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CrossReferencesRequest) GetRelatedNodeKind() []string {
	if m != nil {
		return m.RelatedNodeKind
	}
	return nil
}

func (m *CrossReferencesRequest) GetAnchorText() bool {
	if m != nil {
		return m.AnchorText
	}
	return false
}

func (m *CrossReferencesRequest) GetNodeDefinitions() bool {
	if m != nil {
		return m.NodeDefinitions
	}
	return false
}

func (m *CrossReferencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrossReferencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *CrossReferencesRequest) GetSnippets() SnippetsKind {
	if m != nil {
		return m.Snippets
	}
	return SnippetsKind_NONE
}

type Anchor struct {
	Ticket      string                   `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Kind        string                   `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Parent      string                   `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	Span        *kythe_proto_common.Span `protobuf:"bytes,10,opt,name=span" json:"span,omitempty"`
	Text        string                   `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Snippet     string                   `protobuf:"bytes,7,opt,name=snippet" json:"snippet,omitempty"`
	SnippetSpan *kythe_proto_common.Span `protobuf:"bytes,11,opt,name=snippet_span,json=snippetSpan" json:"snippet_span,omitempty"`
}

func (m *Anchor) Reset()                    { *m = Anchor{} }
func (m *Anchor) String() string            { return proto.CompactTextString(m) }
func (*Anchor) ProtoMessage()               {}
func (*Anchor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Anchor) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Anchor) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Anchor) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Anchor) GetSpan() *kythe_proto_common.Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *Anchor) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Anchor) GetSnippet() string {
	if m != nil {
		return m.Snippet
	}
	return ""
}

func (m *Anchor) GetSnippetSpan() *kythe_proto_common.Span {
	if m != nil {
		return m.SnippetSpan
	}
	return nil
}

type Printable struct {
	RawText string                     `protobuf:"bytes,1,opt,name=raw_text,json=rawText" json:"raw_text,omitempty"`
	Link    []*kythe_proto_common.Link `protobuf:"bytes,2,rep,name=link" json:"link,omitempty"`
}

func (m *Printable) Reset()                    { *m = Printable{} }
func (m *Printable) String() string            { return proto.CompactTextString(m) }
func (*Printable) ProtoMessage()               {}
func (*Printable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Printable) GetRawText() string {
	if m != nil {
		return m.RawText
	}
	return ""
}

func (m *Printable) GetLink() []*kythe_proto_common.Link {
	if m != nil {
		return m.Link
	}
	return nil
}

type CrossReferencesReply struct {
	Total               *CrossReferencesReply_Total                        `protobuf:"bytes,5,opt,name=total" json:"total,omitempty"`
	CrossReferences     map[string]*CrossReferencesReply_CrossReferenceSet `protobuf:"bytes,1,rep,name=cross_references,json=crossReferences" json:"cross_references,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nodes               map[string]*kythe_proto_common.NodeInfo            `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DefinitionLocations map[string]*Anchor                                 `protobuf:"bytes,3,rep,name=definition_locations,json=definitionLocations" json:"definition_locations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NextPageToken       string                                             `protobuf:"bytes,10,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *CrossReferencesReply) Reset()                    { *m = CrossReferencesReply{} }
func (m *CrossReferencesReply) String() string            { return proto.CompactTextString(m) }
func (*CrossReferencesReply) ProtoMessage()               {}
func (*CrossReferencesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CrossReferencesReply) GetTotal() *CrossReferencesReply_Total {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *CrossReferencesReply) GetCrossReferences() map[string]*CrossReferencesReply_CrossReferenceSet {
	if m != nil {
		return m.CrossReferences
	}
	return nil
}

func (m *CrossReferencesReply) GetNodes() map[string]*kythe_proto_common.NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CrossReferencesReply) GetDefinitionLocations() map[string]*Anchor {
	if m != nil {
		return m.DefinitionLocations
	}
	return nil
}

func (m *CrossReferencesReply) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CrossReferencesReply_RelatedNode struct {
	Ticket       string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	RelationKind string `protobuf:"bytes,2,opt,name=relation_kind,json=relationKind" json:"relation_kind,omitempty"`
	Ordinal      int32  `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (m *CrossReferencesReply_RelatedNode) Reset()         { *m = CrossReferencesReply_RelatedNode{} }
func (m *CrossReferencesReply_RelatedNode) String() string { return proto.CompactTextString(m) }
func (*CrossReferencesReply_RelatedNode) ProtoMessage()    {}
func (*CrossReferencesReply_RelatedNode) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

func (m *CrossReferencesReply_RelatedNode) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *CrossReferencesReply_RelatedNode) GetRelationKind() string {
	if m != nil {
		return m.RelationKind
	}
	return ""
}

func (m *CrossReferencesReply_RelatedNode) GetOrdinal() int32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

type CrossReferencesReply_RelatedAnchor struct {
	Anchor       *Anchor                          `protobuf:"bytes,1,opt,name=anchor" json:"anchor,omitempty"`
	MarkedSource *kythe_proto_common.MarkedSource `protobuf:"bytes,5,opt,name=marked_source,json=markedSource" json:"marked_source,omitempty"`
	Site         []*Anchor                        `protobuf:"bytes,3,rep,name=site" json:"site,omitempty"`
	Ticket       string                           `protobuf:"bytes,4,opt,name=ticket" json:"ticket,omitempty"`
}

func (m *CrossReferencesReply_RelatedAnchor) Reset()         { *m = CrossReferencesReply_RelatedAnchor{} }
func (m *CrossReferencesReply_RelatedAnchor) String() string { return proto.CompactTextString(m) }
func (*CrossReferencesReply_RelatedAnchor) ProtoMessage()    {}
func (*CrossReferencesReply_RelatedAnchor) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 1}
}

func (m *CrossReferencesReply_RelatedAnchor) GetAnchor() *Anchor {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *CrossReferencesReply_RelatedAnchor) GetMarkedSource() *kythe_proto_common.MarkedSource {
	if m != nil {
		return m.MarkedSource
	}
	return nil
}

func (m *CrossReferencesReply_RelatedAnchor) GetSite() []*Anchor {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *CrossReferencesReply_RelatedAnchor) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

type CrossReferencesReply_CrossReferenceSet struct {
	Ticket       string                                `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	MarkedSource *kythe_proto_common.MarkedSource      `protobuf:"bytes,8,opt,name=marked_source,json=markedSource" json:"marked_source,omitempty"`
	Definition   []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,2,rep,name=definition" json:"definition,omitempty"`
	Declaration  []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,5,rep,name=declaration" json:"declaration,omitempty"`
	Reference    []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,3,rep,name=reference" json:"reference,omitempty"`
	Caller       []*CrossReferencesReply_RelatedAnchor `protobuf:"bytes,6,rep,name=caller" json:"caller,omitempty"`
	RelatedNode  []*CrossReferencesReply_RelatedNode   `protobuf:"bytes,10,rep,name=related_node,json=relatedNode" json:"related_node,omitempty"`
}

func (m *CrossReferencesReply_CrossReferenceSet) Reset() {
	*m = CrossReferencesReply_CrossReferenceSet{}
}
func (m *CrossReferencesReply_CrossReferenceSet) String() string { return proto.CompactTextString(m) }
func (*CrossReferencesReply_CrossReferenceSet) ProtoMessage()    {}
func (*CrossReferencesReply_CrossReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 2}
}

func (m *CrossReferencesReply_CrossReferenceSet) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *CrossReferencesReply_CrossReferenceSet) GetMarkedSource() *kythe_proto_common.MarkedSource {
	if m != nil {
		return m.MarkedSource
	}
	return nil
}

func (m *CrossReferencesReply_CrossReferenceSet) GetDefinition() []*CrossReferencesReply_RelatedAnchor {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (m *CrossReferencesReply_CrossReferenceSet) GetDeclaration() []*CrossReferencesReply_RelatedAnchor {
	if m != nil {
		return m.Declaration
	}
	return nil
}

func (m *CrossReferencesReply_CrossReferenceSet) GetReference() []*CrossReferencesReply_RelatedAnchor {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *CrossReferencesReply_CrossReferenceSet) GetCaller() []*CrossReferencesReply_RelatedAnchor {
	if m != nil {
		return m.Caller
	}
	return nil
}

func (m *CrossReferencesReply_CrossReferenceSet) GetRelatedNode() []*CrossReferencesReply_RelatedNode {
	if m != nil {
		return m.RelatedNode
	}
	return nil
}

type CrossReferencesReply_Total struct {
	Definitions            int64            `protobuf:"varint,1,opt,name=definitions" json:"definitions,omitempty"`
	Declarations           int64            `protobuf:"varint,2,opt,name=declarations" json:"declarations,omitempty"`
	References             int64            `protobuf:"varint,3,opt,name=references" json:"references,omitempty"`
	Documentation          int64            `protobuf:"varint,4,opt,name=documentation" json:"documentation,omitempty"`
	Callers                int64            `protobuf:"varint,5,opt,name=callers" json:"callers,omitempty"`
	RelatedNodesByRelation map[string]int64 `protobuf:"bytes,6,rep,name=related_nodes_by_relation,json=relatedNodesByRelation" json:"related_nodes_by_relation,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *CrossReferencesReply_Total) Reset()                    { *m = CrossReferencesReply_Total{} }
func (m *CrossReferencesReply_Total) String() string            { return proto.CompactTextString(m) }
func (*CrossReferencesReply_Total) ProtoMessage()               {}
func (*CrossReferencesReply_Total) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 3} }

func (m *CrossReferencesReply_Total) GetDefinitions() int64 {
	if m != nil {
		return m.Definitions
	}
	return 0
}

func (m *CrossReferencesReply_Total) GetDeclarations() int64 {
	if m != nil {
		return m.Declarations
	}
	return 0
}

func (m *CrossReferencesReply_Total) GetReferences() int64 {
	if m != nil {
		return m.References
	}
	return 0
}

func (m *CrossReferencesReply_Total) GetDocumentation() int64 {
	if m != nil {
		return m.Documentation
	}
	return 0
}

func (m *CrossReferencesReply_Total) GetCallers() int64 {
	if m != nil {
		return m.Callers
	}
	return 0
}

func (m *CrossReferencesReply_Total) GetRelatedNodesByRelation() map[string]int64 {
	if m != nil {
		return m.RelatedNodesByRelation
	}
	return nil
}

type DocumentationRequest struct {
	Ticket          []string `protobuf:"bytes,1,rep,name=ticket" json:"ticket,omitempty"`
	Filter          []string `protobuf:"bytes,2,rep,name=filter" json:"filter,omitempty"`
	IncludeChildren bool     `protobuf:"varint,3,opt,name=include_children,json=includeChildren" json:"include_children,omitempty"`
}

func (m *DocumentationRequest) Reset()                    { *m = DocumentationRequest{} }
func (m *DocumentationRequest) String() string            { return proto.CompactTextString(m) }
func (*DocumentationRequest) ProtoMessage()               {}
func (*DocumentationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DocumentationRequest) GetTicket() []string {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *DocumentationRequest) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *DocumentationRequest) GetIncludeChildren() bool {
	if m != nil {
		return m.IncludeChildren
	}
	return false
}

type DocumentationReply struct {
	Document            []*DocumentationReply_Document          `protobuf:"bytes,1,rep,name=document" json:"document,omitempty"`
	Nodes               map[string]*kythe_proto_common.NodeInfo `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DefinitionLocations map[string]*Anchor                      `protobuf:"bytes,3,rep,name=definition_locations,json=definitionLocations" json:"definition_locations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DocumentationReply) Reset()                    { *m = DocumentationReply{} }
func (m *DocumentationReply) String() string            { return proto.CompactTextString(m) }
func (*DocumentationReply) ProtoMessage()               {}
func (*DocumentationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DocumentationReply) GetDocument() []*DocumentationReply_Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *DocumentationReply) GetNodes() map[string]*kythe_proto_common.NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DocumentationReply) GetDefinitionLocations() map[string]*Anchor {
	if m != nil {
		return m.DefinitionLocations
	}
	return nil
}

type DocumentationReply_Document struct {
	Ticket       string                           `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Text         *Printable                       `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Signature    *Printable                       `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	Type         *Printable                       `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Initializer  *Printable                       `protobuf:"bytes,5,opt,name=initializer" json:"initializer,omitempty"`
	DefinedBy    *Printable                       `protobuf:"bytes,6,opt,name=defined_by,json=definedBy" json:"defined_by,omitempty"`
	MarkedSource *kythe_proto_common.MarkedSource `protobuf:"bytes,8,opt,name=marked_source,json=markedSource" json:"marked_source,omitempty"`
	Children     []*DocumentationReply_Document   `protobuf:"bytes,9,rep,name=children" json:"children,omitempty"`
}

func (m *DocumentationReply_Document) Reset()                    { *m = DocumentationReply_Document{} }
func (m *DocumentationReply_Document) String() string            { return proto.CompactTextString(m) }
func (*DocumentationReply_Document) ProtoMessage()               {}
func (*DocumentationReply_Document) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *DocumentationReply_Document) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *DocumentationReply_Document) GetText() *Printable {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *DocumentationReply_Document) GetSignature() *Printable {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DocumentationReply_Document) GetType() *Printable {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DocumentationReply_Document) GetInitializer() *Printable {
	if m != nil {
		return m.Initializer
	}
	return nil
}

func (m *DocumentationReply_Document) GetDefinedBy() *Printable {
	if m != nil {
		return m.DefinedBy
	}
	return nil
}

func (m *DocumentationReply_Document) GetMarkedSource() *kythe_proto_common.MarkedSource {
	if m != nil {
		return m.MarkedSource
	}
	return nil
}

func (m *DocumentationReply_Document) GetChildren() []*DocumentationReply_Document {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto.RegisterType((*Location)(nil), "kythe.proto.Location")
	proto.RegisterType((*DecorationsRequest)(nil), "kythe.proto.DecorationsRequest")
	proto.RegisterType((*DecorationsReply)(nil), "kythe.proto.DecorationsReply")
	proto.RegisterType((*DecorationsReply_Reference)(nil), "kythe.proto.DecorationsReply.Reference")
	proto.RegisterType((*DecorationsReply_Override)(nil), "kythe.proto.DecorationsReply.Override")
	proto.RegisterType((*DecorationsReply_Overrides)(nil), "kythe.proto.DecorationsReply.Overrides")
	proto.RegisterType((*CrossReferencesRequest)(nil), "kythe.proto.CrossReferencesRequest")
	proto.RegisterType((*Anchor)(nil), "kythe.proto.Anchor")
	proto.RegisterType((*Printable)(nil), "kythe.proto.Printable")
	proto.RegisterType((*CrossReferencesReply)(nil), "kythe.proto.CrossReferencesReply")
	proto.RegisterType((*CrossReferencesReply_RelatedNode)(nil), "kythe.proto.CrossReferencesReply.RelatedNode")
	proto.RegisterType((*CrossReferencesReply_RelatedAnchor)(nil), "kythe.proto.CrossReferencesReply.RelatedAnchor")
	proto.RegisterType((*CrossReferencesReply_CrossReferenceSet)(nil), "kythe.proto.CrossReferencesReply.CrossReferenceSet")
	proto.RegisterType((*CrossReferencesReply_Total)(nil), "kythe.proto.CrossReferencesReply.Total")
	proto.RegisterType((*DocumentationRequest)(nil), "kythe.proto.DocumentationRequest")
	proto.RegisterType((*DocumentationReply)(nil), "kythe.proto.DocumentationReply")
	proto.RegisterType((*DocumentationReply_Document)(nil), "kythe.proto.DocumentationReply.Document")
	proto.RegisterEnum("kythe.proto.SnippetsKind", SnippetsKind_name, SnippetsKind_value)
	proto.RegisterEnum("kythe.proto.Location_Kind", Location_Kind_name, Location_Kind_value)
	proto.RegisterEnum("kythe.proto.DecorationsRequest_SpanKind", DecorationsRequest_SpanKind_name, DecorationsRequest_SpanKind_value)
	proto.RegisterEnum("kythe.proto.DecorationsReply_Override_Kind", DecorationsReply_Override_Kind_name, DecorationsReply_Override_Kind_value)
	proto.RegisterEnum("kythe.proto.CrossReferencesRequest_DefinitionKind", CrossReferencesRequest_DefinitionKind_name, CrossReferencesRequest_DefinitionKind_value)
	proto.RegisterEnum("kythe.proto.CrossReferencesRequest_DeclarationKind", CrossReferencesRequest_DeclarationKind_name, CrossReferencesRequest_DeclarationKind_value)
	proto.RegisterEnum("kythe.proto.CrossReferencesRequest_ReferenceKind", CrossReferencesRequest_ReferenceKind_name, CrossReferencesRequest_ReferenceKind_value)
	proto.RegisterEnum("kythe.proto.CrossReferencesRequest_CallerKind", CrossReferencesRequest_CallerKind_name, CrossReferencesRequest_CallerKind_value)
}

func init() { proto.RegisterFile("kythe/proto/xref.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x5b, 0x73, 0xdb, 0xc6,
	0xf5, 0x17, 0x48, 0x90, 0x02, 0x0f, 0x78, 0x81, 0xd6, 0x8a, 0xfe, 0x30, 0xf3, 0x4f, 0x2c, 0xc3,
	0x6d, 0x2c, 0x5f, 0x22, 0x4f, 0xe8, 0xa6, 0xe3, 0x49, 0x9b, 0xb4, 0x92, 0x48, 0xa5, 0x54, 0x15,
	0xd2, 0x5d, 0xd2, 0xa9, 0x67, 0x3c, 0x53, 0x14, 0x26, 0x56, 0x32, 0x46, 0x14, 0xc0, 0x00, 0x90,
	0x6d, 0xfa, 0xa1, 0x33, 0x7d, 0xef, 0x53, 0x3f, 0x45, 0x5f, 0x3b, 0xd3, 0x4f, 0xd0, 0xc7, 0x7e,
	0x97, 0x3e, 0x76, 0xa6, 0x2f, 0xe9, 0x74, 0x70, 0x16, 0x00, 0x17, 0xbc, 0xcb, 0xd3, 0x97, 0xbc,
	0x61, 0xcf, 0x9e, 0xf3, 0x3b, 0xbb, 0xe7, 0xbe, 0x80, 0x9d, 0x8b, 0x71, 0xf8, 0x8a, 0x3d, 0x1a,
	0xf9, 0x5e, 0xe8, 0x3d, 0x7a, 0xeb, 0xb3, 0xb3, 0x7d, 0xfc, 0x24, 0x2a, 0xd2, 0xf9, 0xa2, 0xae,
	0x8b, 0x4c, 0x03, 0xef, 0xf2, 0xd2, 0x73, 0xf9, 0x8e, 0xf1, 0x17, 0x09, 0x94, 0x53, 0x6f, 0x60,
	0x85, 0x8e, 0xe7, 0x92, 0x1d, 0x28, 0x86, 0xce, 0xe0, 0x82, 0x85, 0xba, 0xb4, 0x2b, 0xed, 0x95,
	0x68, 0xbc, 0x22, 0xfb, 0x20, 0x5f, 0x38, 0xae, 0xad, 0xe7, 0x76, 0xa5, 0xbd, 0x6a, 0xa3, 0xbe,
	0x2f, 0x40, 0xef, 0x27, 0xc2, 0xfb, 0xbf, 0x76, 0x5c, 0x9b, 0x22, 0x1f, 0x79, 0x08, 0x72, 0x30,
	0xb2, 0x5c, 0xbd, 0xb0, 0x2b, 0xed, 0xa9, 0x0d, 0x3d, 0xc3, 0x1f, 0x6b, 0xef, 0x8d, 0x2c, 0x97,
	0x22, 0x97, 0x51, 0x07, 0x39, 0x92, 0x25, 0x0a, 0xc8, 0xc7, 0xed, 0xd3, 0x96, 0xb6, 0x11, 0x7d,
	0xf5, 0x9e, 0x1e, 0x74, 0x34, 0xe9, 0x44, 0x56, 0xf2, 0x9a, 0x7c, 0x22, 0x2b, 0xb2, 0x56, 0x30,
	0xfe, 0x99, 0x07, 0xd2, 0x64, 0x03, 0xcf, 0x47, 0x7d, 0x01, 0x65, 0xdf, 0x5d, 0xb1, 0x20, 0x24,
	0x9f, 0x81, 0x32, 0x8c, 0xcf, 0x80, 0xc7, 0x56, 0x1b, 0x1f, 0xcc, 0x3d, 0x20, 0x4d, 0xd9, 0x48,
	0x0b, 0x4a, 0x91, 0x66, 0x13, 0x2f, 0x05, 0x78, 0xa9, 0xbd, 0x8c, 0xcc, 0xac, 0x1a, 0x3c, 0x30,
	0x5e, 0x51, 0x09, 0xe2, 0x2f, 0x72, 0x1b, 0xca, 0xb6, 0xe3, 0x87, 0x63, 0xf3, 0xe5, 0xd5, 0xd9,
	0x19, 0xf3, 0xd1, 0x3c, 0x65, 0xaa, 0x22, 0xed, 0x10, 0x49, 0xe4, 0x16, 0xa8, 0x81, 0x77, 0xe5,
	0x0f, 0x98, 0x19, 0xb2, 0xb7, 0xa1, 0x9e, 0xdf, 0x95, 0xf6, 0x14, 0x0a, 0x9c, 0xd4, 0x67, 0x6f,
	0x43, 0xf2, 0x31, 0x80, 0xcf, 0xce, 0x98, 0xcf, 0xdc, 0x01, 0x0b, 0x74, 0x99, 0xef, 0x4f, 0x28,
	0xe4, 0x53, 0x20, 0xa1, 0xe5, 0x9f, 0xb3, 0xd0, 0xb4, 0xd9, 0x99, 0xe3, 0x3a, 0x78, 0x26, 0xbd,
	0x88, 0x7c, 0x5b, 0x7c, 0xa7, 0x39, 0xd9, 0x88, 0x3c, 0x78, 0xe6, 0x0c, 0x43, 0xe6, 0xeb, 0x85,
	0xdd, 0x7c, 0xe4, 0x41, 0xbe, 0x22, 0x0f, 0x60, 0x8b, 0xbd, 0x0d, 0x99, 0x6b, 0x07, 0xa6, 0xf7,
	0x9a, 0xf9, 0xbe, 0x63, 0xb3, 0x40, 0xdf, 0x44, 0x14, 0x2d, 0xde, 0xe8, 0x26, 0x74, 0xb2, 0x0b,
	0xaa, 0xed, 0x58, 0xe7, 0xae, 0x17, 0x84, 0xce, 0x20, 0xd0, 0x15, 0x64, 0x13, 0x49, 0xe4, 0x73,
	0x50, 0x02, 0xd7, 0x19, 0x8d, 0x58, 0x18, 0xe8, 0x25, 0xb4, 0xdf, 0xcd, 0x8c, 0xfd, 0x7a, 0xf1,
	0x66, 0x6c, 0xb0, 0x78, 0x65, 0x3c, 0x04, 0x25, 0x31, 0x23, 0xa9, 0x81, 0xfa, 0xdb, 0x76, 0xff,
	0x57, 0xed, 0x8e, 0x89, 0xae, 0xde, 0x88, 0x08, 0x07, 0xb4, 0xfb, 0xac, 0xd3, 0xe4, 0x04, 0xc9,
	0xf8, 0x3b, 0x80, 0x96, 0x71, 0xc4, 0x68, 0x38, 0x7e, 0x1f, 0x6f, 0x4f, 0xf9, 0x80, 0x7b, 0x49,
	0xf4, 0x41, 0x1d, 0x14, 0xe6, 0x0e, 0x3c, 0xdb, 0x71, 0xcf, 0xd1, 0x43, 0x25, 0x9a, 0xae, 0xa3,
	0x50, 0x49, 0xbd, 0xa1, 0xcb, 0xbb, 0xf9, 0x3d, 0xb5, 0x71, 0x77, 0x71, 0xa8, 0x8c, 0x86, 0xe3,
	0x7d, 0x9a, 0xb0, 0xd3, 0x89, 0x24, 0xf9, 0x0a, 0x60, 0x62, 0x3f, 0xf4, 0x8d, 0xda, 0xf8, 0x78,
	0x5e, 0x5e, 0x34, 0x53, 0x2e, 0x2a, 0x48, 0x90, 0xaf, 0xa0, 0xe0, 0x7a, 0x91, 0xcf, 0x6a, 0x28,
	0xba, 0xb7, 0xfc, 0x08, 0x9d, 0x88, 0xb5, 0xe5, 0x86, 0xfe, 0x98, 0x72, 0x31, 0xe2, 0xc0, 0xf6,
	0x24, 0x7e, 0xcc, 0xc4, 0x34, 0x81, 0xae, 0x21, 0xdc, 0x4f, 0x97, 0xc3, 0x4d, 0x02, 0x2c, 0xb1,
	0x6e, 0x0c, 0x7e, 0xc3, 0x9e, 0xdd, 0x21, 0xbf, 0x9f, 0x17, 0x6a, 0x5b, 0xa8, 0xe7, 0xf1, 0x72,
	0x3d, 0xad, 0xa9, 0x40, 0xe4, 0x4a, 0x66, 0xe2, 0xb3, 0xfe, 0x57, 0x09, 0x4a, 0xa9, 0x95, 0xc9,
	0x1d, 0xa8, 0xc4, 0x19, 0x12, 0xd7, 0xae, 0x1c, 0xba, 0xb0, 0xcc, 0x89, 0x7d, 0x5e, 0xc1, 0x48,
	0x5c, 0xc1, 0xb8, 0x7b, 0x79, 0x95, 0x7a, 0x00, 0x5b, 0x33, 0xa9, 0x85, 0x19, 0x58, 0xa2, 0xda,
	0x74, 0x66, 0x5d, 0xaf, 0xa4, 0x9d, 0xc8, 0x8a, 0xa4, 0xe5, 0x4e, 0x64, 0x05, 0x34, 0xf5, 0x44,
	0x56, 0x54, 0xad, 0x5c, 0xff, 0x63, 0x0e, 0x94, 0xe4, 0x06, 0x58, 0x67, 0x51, 0x41, 0x5a, 0x67,
	0x71, 0x35, 0xff, 0x44, 0x85, 0x05, 0x27, 0xfa, 0x45, 0xa6, 0x28, 0x3f, 0x58, 0x6e, 0xda, 0x44,
	0xb5, 0x58, 0xa5, 0x5b, 0x50, 0xb9, 0xb4, 0xfc, 0x0b, 0x66, 0x9b, 0x3c, 0x17, 0xf0, 0xee, 0x6a,
	0x63, 0x77, 0xde, 0xdd, 0xbe, 0x41, 0xc6, 0x1e, 0xf2, 0xd1, 0xf2, 0xa5, 0xb0, 0x32, 0x8c, 0xb8,
	0x7c, 0x57, 0xa0, 0xd4, 0xfd, 0xb6, 0x45, 0x69, 0xbb, 0xd9, 0xea, 0x69, 0x1b, 0x44, 0x85, 0xcd,
	0xd6, 0xf3, 0x7e, 0xab, 0xd3, 0xec, 0x25, 0x65, 0xbc, 0xde, 0x85, 0xd2, 0xa4, 0xc8, 0x1c, 0x82,
	0x92, 0x84, 0x87, 0x2e, 0x61, 0x74, 0x7c, 0xb2, 0xde, 0x15, 0x68, 0x2a, 0x57, 0xff, 0x16, 0x60,
	0x12, 0xea, 0x44, 0x83, 0xfc, 0x05, 0x1b, 0xc7, 0x26, 0x8d, 0x3e, 0x49, 0x03, 0x0a, 0xaf, 0xad,
	0xe1, 0x15, 0x43, 0x1b, 0xa9, 0x8d, 0xff, 0x9f, 0x77, 0xb3, 0x08, 0xa0, 0xed, 0x9e, 0x79, 0x94,
	0xb3, 0x7e, 0x91, 0x7b, 0x22, 0xd5, 0x5f, 0x80, 0xbe, 0x28, 0xe6, 0xe7, 0x68, 0xb9, 0x97, 0xd5,
	0x72, 0x23, 0xa3, 0xe5, 0xc0, 0x1d, 0xbc, 0xf2, 0x7c, 0x11, 0x7c, 0x08, 0x1f, 0xcc, 0x0d, 0xf4,
	0x39, 0xc8, 0x5f, 0x66, 0x91, 0xef, 0xae, 0x67, 0xa0, 0x40, 0xd0, 0x66, 0x7c, 0xbf, 0x09, 0x3b,
	0x47, 0xbe, 0x17, 0x04, 0x69, 0xc2, 0xa4, 0x8d, 0x53, 0xec, 0xf6, 0x79, 0xa1, 0xdb, 0xbf, 0x80,
	0x9a, 0x50, 0x2b, 0x84, 0x18, 0x6b, 0x64, 0xf4, 0xcf, 0x47, 0x15, 0x8a, 0x05, 0x86, 0x5a, 0xd5,
	0xce, 0xac, 0xc9, 0xef, 0x40, 0xb3, 0xd9, 0x60, 0x68, 0xf1, 0x93, 0x73, 0xf4, 0x4d, 0x44, 0x7f,
	0xbc, 0x1e, 0x7a, 0x2a, 0x8b, 0xf0, 0x35, 0x3b, 0x4b, 0x20, 0xcf, 0xa1, 0x9a, 0x56, 0x5d, 0x33,
	0x4d, 0xf9, 0x6a, 0xe3, 0xb3, 0x75, 0xd0, 0x53, 0x0a, 0x62, 0x57, 0x7c, 0x71, 0x49, 0xba, 0xa0,
	0x0e, 0xac, 0xe1, 0x90, 0xf9, 0x1c, 0xb6, 0x8c, 0xb0, 0xfb, 0xeb, 0xc0, 0x1e, 0xa1, 0x18, 0x62,
	0xc2, 0x20, 0xfd, 0x5e, 0xd8, 0xab, 0xef, 0xc3, 0x96, 0xcf, 0x86, 0x56, 0xc8, 0x6c, 0x33, 0x2a,
	0xde, 0x5c, 0x5d, 0x15, 0x59, 0x6a, 0xf1, 0x46, 0x14, 0xb4, 0x88, 0x71, 0x0b, 0x54, 0x0b, 0x23,
	0x8c, 0xf7, 0x36, 0x3e, 0x17, 0x00, 0x27, 0x61, 0x6f, 0xbb, 0x07, 0x1a, 0x82, 0x88, 0xd3, 0x03,
	0x6f, 0xe8, 0xb5, 0x88, 0x2e, 0xce, 0x0e, 0x1f, 0x42, 0x69, 0x64, 0x9d, 0x33, 0x33, 0x70, 0xde,
	0x31, 0x9c, 0x8a, 0x0a, 0x54, 0x89, 0x08, 0x3d, 0xe7, 0x1d, 0x23, 0x1f, 0x01, 0xe0, 0x66, 0xe8,
	0x5d, 0x30, 0x57, 0x57, 0x31, 0x46, 0x91, 0xbd, 0x1f, 0x11, 0x32, 0x03, 0x41, 0x65, 0xfd, 0x81,
	0xe0, 0x15, 0x54, 0xb3, 0xf1, 0x42, 0x08, 0x54, 0x3b, 0x5d, 0xb3, 0xd9, 0x3a, 0x6e, 0x77, 0xda,
	0xfd, 0x76, 0xb7, 0x13, 0x95, 0x92, 0x1b, 0x50, 0x3b, 0x38, 0x3d, 0xcd, 0x10, 0x25, 0xb2, 0x0d,
	0xda, 0xf1, 0xb3, 0x29, 0x6a, 0x8e, 0xfc, 0x1f, 0xdc, 0x38, 0x6c, 0x77, 0x9a, 0xed, 0xce, 0xd7,
	0x99, 0x8d, 0xbc, 0xf1, 0x73, 0xa8, 0x4d, 0xc5, 0x4e, 0x04, 0x8b, 0xaa, 0x8e, 0x4e, 0x0f, 0xe8,
	0x41, 0xa2, 0x6b, 0x1b, 0x34, 0xae, 0x4b, 0xa0, 0x4a, 0x86, 0x0d, 0x95, 0x4c, 0x6c, 0x90, 0x2d,
	0xa8, 0x74, 0xba, 0x26, 0x6d, 0x1d, 0xb7, 0x68, 0xab, 0x73, 0xd4, 0x8a, 0x4f, 0x79, 0x14, 0x89,
	0x0a, 0x44, 0x29, 0x3a, 0x4f, 0xa7, 0xdb, 0x31, 0xa7, 0x37, 0x72, 0xd1, 0x3d, 0xa7, 0x68, 0x79,
	0xe3, 0x18, 0x60, 0x12, 0x2a, 0xa4, 0x0a, 0xd0, 0xe9, 0xa2, 0x64, 0x8b, 0x46, 0xf8, 0x04, 0xaa,
	0xcd, 0x36, 0x6d, 0x1d, 0xf5, 0x53, 0x1a, 0x1a, 0x21, 0xa9, 0xb9, 0x29, 0x35, 0xc7, 0xc7, 0xe5,
	0x13, 0x59, 0xb1, 0x35, 0x66, 0x7c, 0x2f, 0x41, 0x91, 0xd7, 0xa0, 0x85, 0xd3, 0x3d, 0x11, 0x1a,
	0x49, 0xd2, 0x1b, 0x77, 0xa0, 0x38, 0xb2, 0x7c, 0xe6, 0x86, 0x71, 0xc7, 0x8c, 0x57, 0x69, 0x1b,
	0x84, 0x75, 0xda, 0x60, 0x84, 0x9c, 0x86, 0x65, 0x89, 0xe2, 0x37, 0xd1, 0x61, 0x33, 0x76, 0x3f,
	0xe6, 0x7d, 0x89, 0x26, 0x4b, 0xf2, 0x33, 0x28, 0xc7, 0x9f, 0x26, 0xea, 0x50, 0x57, 0xe8, 0x50,
	0x63, 0xee, 0x1e, 0xef, 0xb8, 0xfc, 0xce, 0x05, 0xad, 0x78, 0x22, 0x2b, 0x8a, 0x56, 0x3a, 0x91,
	0x95, 0x92, 0x06, 0x46, 0x1f, 0x4a, 0x4f, 0x7d, 0xc7, 0x0d, 0xad, 0x97, 0x43, 0x46, 0x6e, 0x82,
	0xe2, 0x5b, 0x6f, 0x78, 0xaa, 0x70, 0x1b, 0x6c, 0xfa, 0xd6, 0x1b, 0xcc, 0x93, 0x87, 0x20, 0x0f,
	0x1d, 0xf7, 0x42, 0xcf, 0x61, 0x2b, 0x9a, 0xab, 0xf4, 0xd4, 0x71, 0x2f, 0x28, 0x72, 0x19, 0xff,
	0xa9, 0xc2, 0xf6, 0x4c, 0xb2, 0x47, 0xe3, 0xe9, 0x97, 0x50, 0x08, 0xbd, 0xd0, 0x1a, 0xc6, 0x73,
	0xc2, 0xdd, 0xe5, 0xe5, 0x21, 0xaa, 0xda, 0xfd, 0x88, 0x9d, 0x72, 0x29, 0x62, 0x81, 0x36, 0x88,
	0x98, 0x4c, 0xe1, 0x4d, 0x20, 0xcd, 0x19, 0xd1, 0xe6, 0x22, 0x4d, 0x11, 0xf9, 0xf4, 0x54, 0x1b,
	0x64, 0xa9, 0xe4, 0x30, 0x99, 0x24, 0xf9, 0x4d, 0x1f, 0xae, 0xc6, 0x9d, 0x9d, 0x26, 0x2f, 0x17,
	0x4c, 0x93, 0x79, 0x84, 0xfc, 0x62, 0x35, 0xe4, 0xf5, 0x26, 0xca, 0x4f, 0xa0, 0xe6, 0xb2, 0xb7,
	0xa1, 0x29, 0x14, 0x20, 0x40, 0xef, 0x55, 0x22, 0xf2, 0xd3, 0xa4, 0x08, 0xd5, 0x6d, 0x50, 0xe9,
	0xa4, 0x3e, 0x2e, 0x8c, 0xf7, 0x3b, 0x50, 0xc1, 0x32, 0x9a, 0xe9, 0x6e, 0x25, 0x5a, 0x4e, 0x88,
	0x98, 0x7d, 0x3a, 0x6c, 0x7a, 0xbe, 0xed, 0xb8, 0xd6, 0x10, 0x33, 0xa0, 0x40, 0x93, 0x65, 0xfd,
	0x1f, 0x52, 0x54, 0x0c, 0x50, 0x4d, 0x9c, 0x58, 0x0f, 0xa0, 0xc8, 0x2b, 0x6e, 0xfc, 0x22, 0x99,
	0x3b, 0x01, 0xc4, 0x2c, 0xb3, 0x53, 0x57, 0xe1, 0x7d, 0xa6, 0x2e, 0x72, 0x17, 0xe4, 0xc0, 0x09,
	0x59, 0x6c, 0xf2, 0xb9, 0x1a, 0x91, 0x41, 0xb0, 0x82, 0x2c, 0x5a, 0xe1, 0x44, 0x56, 0x72, 0x5a,
	0xbe, 0xfe, 0x27, 0x19, 0xb6, 0xb2, 0x1e, 0xea, 0xb1, 0x70, 0xa1, 0xe5, 0x66, 0xce, 0xae, 0xbc,
	0xd7, 0xd9, 0xbb, 0x00, 0xc2, 0x7c, 0xcb, 0xe3, 0xf0, 0xd1, 0xea, 0xa0, 0xc9, 0x18, 0x9d, 0x0a,
	0x10, 0xe4, 0x37, 0xa0, 0x0a, 0x73, 0x40, 0xfc, 0xbc, 0xba, 0x36, 0xa2, 0x88, 0x41, 0xbe, 0x11,
	0xdf, 0x7d, 0xf9, 0xf7, 0x03, 0x14, 0xde, 0x7f, 0x5f, 0x43, 0x91, 0x77, 0x7e, 0xbd, 0xf8, 0x7e,
	0x58, 0xb1, 0x38, 0x79, 0x0a, 0x65, 0x71, 0x38, 0xd0, 0x01, 0xe1, 0x3e, 0x5d, 0x1b, 0x2e, 0xca,
	0x0c, 0xaa, 0x0a, 0x63, 0x44, 0x5a, 0x39, 0x37, 0x35, 0xa5, 0xfe, 0xef, 0x1c, 0x14, 0xb0, 0x20,
	0xe1, 0x3f, 0x00, 0x61, 0x64, 0x88, 0xe2, 0x20, 0x4f, 0x45, 0x12, 0x31, 0xa0, 0x2c, 0x18, 0x2c,
	0xc0, 0x2c, 0xca, 0xd3, 0x0c, 0x6d, 0xea, 0xef, 0x46, 0x1e, 0x39, 0xc4, 0xbf, 0x1b, 0x3f, 0x82,
	0x8a, 0xed, 0x0d, 0xae, 0x2e, 0x99, 0x1b, 0x5a, 0xe9, 0xf3, 0x2b, 0x4f, 0xb3, 0xc4, 0x28, 0x17,
	0xf9, 0xed, 0x03, 0x4c, 0x96, 0x3c, 0x4d, 0x96, 0xe4, 0x0f, 0x70, 0x53, 0xb4, 0x46, 0x60, 0xbe,
	0x1c, 0x9b, 0x49, 0x1a, 0xc7, 0x96, 0x3e, 0x5a, 0xb3, 0x04, 0x8b, 0x06, 0x0a, 0x0e, 0xc7, 0x34,
	0x46, 0xe1, 0x65, 0x69, 0xc7, 0x9f, 0xbb, 0x59, 0x6f, 0xc3, 0x87, 0x4b, 0xc4, 0xe6, 0x4c, 0xf4,
	0xdb, 0xe2, 0x44, 0x9f, 0x17, 0x9f, 0x05, 0x6f, 0x66, 0x3a, 0xca, 0x22, 0x8c, 0x76, 0xf6, 0x55,
	0xf0, 0xf8, 0xba, 0x9d, 0xa1, 0xc7, 0x42, 0x51, 0xf1, 0x0f, 0xf1, 0x11, 0x65, 0x7c, 0x07, 0xdb,
	0x4d, 0x31, 0x46, 0x56, 0xbd, 0x69, 0x26, 0xb3, 0x76, 0x2e, 0x33, 0x6b, 0xdf, 0x03, 0xcd, 0x71,
	0x07, 0xc3, 0x2b, 0x9b, 0x99, 0x83, 0x57, 0xce, 0xd0, 0xf6, 0x99, 0x1b, 0xff, 0xa4, 0xab, 0xc5,
	0xf4, 0xa3, 0x98, 0x6c, 0xfc, 0xab, 0x08, 0x64, 0x4a, 0x67, 0xd4, 0xf1, 0x9b, 0xa0, 0x24, 0xd1,
	0x1a, 0xb7, 0xea, 0xa9, 0x9f, 0x33, 0x33, 0x22, 0x29, 0x89, 0xa6, 0x92, 0xe4, 0x97, 0xd9, 0xae,
	0x7c, 0x7f, 0x15, 0xc4, 0x6c, 0x4f, 0xbe, 0x58, 0xda, 0x93, 0x9f, 0xac, 0x3c, 0xd3, 0x75, 0x3a,
	0x72, 0xfd, 0x6f, 0x79, 0x50, 0x12, 0x90, 0x85, 0xdd, 0xe2, 0x7e, 0x3c, 0xfd, 0x71, 0x8f, 0xee,
	0x64, 0x4e, 0x90, 0xce, 0x64, 0xf1, 0x54, 0xf8, 0x13, 0x28, 0x05, 0xce, 0xb9, 0x6b, 0x85, 0x57,
	0x3e, 0x43, 0x07, 0x2c, 0x16, 0x98, 0x30, 0xa2, 0x86, 0xf1, 0x28, 0xf9, 0x71, 0xb1, 0x58, 0xc3,
	0x78, 0xc4, 0xc8, 0x13, 0x50, 0xf1, 0x1a, 0xd6, 0xd0, 0x79, 0x87, 0x4f, 0xae, 0x65, 0x22, 0x22,
	0x2b, 0xf9, 0x3c, 0x6e, 0x57, 0xcc, 0x36, 0x5f, 0x8e, 0x71, 0x96, 0x5d, 0x72, 0xb8, 0x98, 0xf3,
	0x70, 0xfc, 0xbf, 0x6a, 0x96, 0x4d, 0x50, 0xd2, 0xc8, 0x2c, 0x5d, 0x37, 0xbe, 0x12, 0xc9, 0xb8,
	0xbc, 0xff, 0x10, 0x53, 0xfd, 0xfe, 0x8f, 0xa1, 0x2c, 0xbe, 0x1e, 0x89, 0x02, 0x72, 0xa7, 0xdb,
	0x69, 0xf1, 0x5f, 0x4c, 0xcd, 0xd6, 0xf1, 0xc1, 0xb3, 0xd3, 0xbe, 0x26, 0x35, 0xfe, 0x9c, 0x03,
	0xf5, 0x39, 0x65, 0x67, 0x3d, 0xe6, 0xbf, 0x76, 0x70, 0xc8, 0x50, 0x85, 0x3f, 0x24, 0xe4, 0xd6,
	0x8a, 0xff, 0xfb, 0xf5, 0x8f, 0x96, 0xfe, 0x5c, 0x31, 0x36, 0xc8, 0x0b, 0xa8, 0x4d, 0x15, 0x57,
	0x72, 0x67, 0x8d, 0xd7, 0x7f, 0xfd, 0xf6, 0xca, 0xfa, 0x6c, 0x6c, 0x90, 0x67, 0x50, 0xc9, 0x38,
	0x92, 0xdc, 0x5e, 0xe6, 0x64, 0x0e, 0x7c, 0x6b, 0x45, 0x1c, 0x18, 0x1b, 0x87, 0x77, 0xe0, 0xd6,
	0xc0, 0xbb, 0xdc, 0x3f, 0xf7, 0xbc, 0xf3, 0x21, 0xdb, 0xb7, 0xd9, 0xeb, 0xd0, 0xf3, 0x86, 0x81,
	0x28, 0xf7, 0x54, 0x7a, 0x59, 0xc4, 0x8f, 0xc7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x99, 0x1e,
	0x27, 0x96, 0x4a, 0x1a, 0x00, 0x00,
}
