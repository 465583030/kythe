// Code generated by protoc-gen-gogo.
// source: kythe/proto/status_service.proto
// DO NOT EDIT!

/*
	Package status_service_proto is a generated protocol buffer package.

	It is generated from these files:
		kythe/proto/status_service.proto

	It has these top-level messages:
		StatusRequest
		StatusReply
*/
package status_service_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusReply_Language_Support int32

const (
	StatusReply_Language_UNSUPPORTED  StatusReply_Language_Support = 0
	StatusReply_Language_EXPERIMENTAL StatusReply_Language_Support = 1
	StatusReply_Language_SUPPORTED    StatusReply_Language_Support = 2
)

var StatusReply_Language_Support_name = map[int32]string{
	0: "UNSUPPORTED",
	1: "EXPERIMENTAL",
	2: "SUPPORTED",
}
var StatusReply_Language_Support_value = map[string]int32{
	"UNSUPPORTED":  0,
	"EXPERIMENTAL": 1,
	"SUPPORTED":    2,
}

func (x StatusReply_Language_Support) String() string {
	return proto.EnumName(StatusReply_Language_Support_name, int32(x))
}
func (StatusReply_Language_Support) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorStatusService, []int{1, 1, 0}
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorStatusService, []int{0} }

type StatusReply struct {
	// The origins of the data served by this endpoint.
	Origins []*StatusReply_Origin `protobuf:"bytes,1,rep,name=origins" json:"origins,omitempty"`
	// The languages supported by this endpoint.
	Languages []*StatusReply_Language `protobuf:"bytes,2,rep,name=languages" json:"languages,omitempty"`
	// An index may comprise data from multiple build origins.  An index_version
	// is an opaque identifier for a complete index, encompassing all reported
	// origins being served.  This is usually distinct from each origin's
	// revision, and may be as simple as a timestamp at which the serving data
	// were created.
	IndexVersion string `protobuf:"bytes,3,opt,name=index_version,json=indexVersion,proto3" json:"index_version,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptorStatusService, []int{1} }

func (m *StatusReply) GetOrigins() []*StatusReply_Origin {
	if m != nil {
		return m.Origins
	}
	return nil
}

func (m *StatusReply) GetLanguages() []*StatusReply_Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *StatusReply) GetIndexVersion() string {
	if m != nil {
		return m.IndexVersion
	}
	return ""
}

type StatusReply_Origin struct {
	Corpus   string `protobuf:"bytes,1,opt,name=corpus,proto3" json:"corpus,omitempty"`
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (m *StatusReply_Origin) Reset()         { *m = StatusReply_Origin{} }
func (m *StatusReply_Origin) String() string { return proto.CompactTextString(m) }
func (*StatusReply_Origin) ProtoMessage()    {}
func (*StatusReply_Origin) Descriptor() ([]byte, []int) {
	return fileDescriptorStatusService, []int{1, 0}
}

func (m *StatusReply_Origin) GetCorpus() string {
	if m != nil {
		return m.Corpus
	}
	return ""
}

func (m *StatusReply_Origin) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

type StatusReply_Language struct {
	Name    string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Support StatusReply_Language_Support `protobuf:"varint,2,opt,name=support,proto3,enum=kythe.proto.StatusReply_Language_Support" json:"support,omitempty"`
}

func (m *StatusReply_Language) Reset()         { *m = StatusReply_Language{} }
func (m *StatusReply_Language) String() string { return proto.CompactTextString(m) }
func (*StatusReply_Language) ProtoMessage()    {}
func (*StatusReply_Language) Descriptor() ([]byte, []int) {
	return fileDescriptorStatusService, []int{1, 1}
}

func (m *StatusReply_Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatusReply_Language) GetSupport() StatusReply_Language_Support {
	if m != nil {
		return m.Support
	}
	return StatusReply_Language_UNSUPPORTED
}

func init() {
	proto.RegisterType((*StatusRequest)(nil), "kythe.proto.StatusRequest")
	proto.RegisterType((*StatusReply)(nil), "kythe.proto.StatusReply")
	proto.RegisterType((*StatusReply_Origin)(nil), "kythe.proto.StatusReply.Origin")
	proto.RegisterType((*StatusReply_Language)(nil), "kythe.proto.StatusReply.Language")
	proto.RegisterEnum("kythe.proto.StatusReply_Language_Support", StatusReply_Language_Support_name, StatusReply_Language_Support_value)
}
func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Origins) > 0 {
		for _, msg := range m.Origins {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStatusService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Languages) > 0 {
		for _, msg := range m.Languages {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStatusService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IndexVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStatusService(dAtA, i, uint64(len(m.IndexVersion)))
		i += copy(dAtA[i:], m.IndexVersion)
	}
	return i, nil
}

func (m *StatusReply_Origin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReply_Origin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Corpus) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStatusService(dAtA, i, uint64(len(m.Corpus)))
		i += copy(dAtA[i:], m.Corpus)
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStatusService(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	return i, nil
}

func (m *StatusReply_Language) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusReply_Language) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStatusService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Support != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatusService(dAtA, i, uint64(m.Support))
	}
	return i, nil
}

func encodeFixed64StatusService(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32StatusService(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStatusService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatusReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Origins) > 0 {
		for _, e := range m.Origins {
			l = e.Size()
			n += 1 + l + sovStatusService(uint64(l))
		}
	}
	if len(m.Languages) > 0 {
		for _, e := range m.Languages {
			l = e.Size()
			n += 1 + l + sovStatusService(uint64(l))
		}
	}
	l = len(m.IndexVersion)
	if l > 0 {
		n += 1 + l + sovStatusService(uint64(l))
	}
	return n
}

func (m *StatusReply_Origin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Corpus)
	if l > 0 {
		n += 1 + l + sovStatusService(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovStatusService(uint64(l))
	}
	return n
}

func (m *StatusReply_Language) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStatusService(uint64(l))
	}
	if m.Support != 0 {
		n += 1 + sovStatusService(uint64(m.Support))
	}
	return n
}

func sovStatusService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStatusService(x uint64) (n int) {
	return sovStatusService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStatusService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatusService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origins = append(m.Origins, &StatusReply_Origin{})
			if err := m.Origins[len(m.Origins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Languages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatusService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Languages = append(m.Languages, &StatusReply_Language{})
			if err := m.Languages[len(m.Languages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatusService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReply_Origin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Origin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Origin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corpus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corpus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatusService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatusService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusReply_Language) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatusService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Language: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Language: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatusService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			m.Support = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Support |= (StatusReply_Language_Support(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatusService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatusService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatusService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatusService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatusService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStatusService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStatusService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStatusService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStatusService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatusService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kythe/proto/status_service.proto", fileDescriptorStatusService) }

var fileDescriptorStatusService = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xbf, 0x4e, 0xc2, 0x50,
	0x14, 0x87, 0x29, 0x98, 0x02, 0xa7, 0x20, 0xe4, 0x0e, 0xa6, 0xe9, 0x50, 0xb0, 0x2e, 0xb8, 0x94,
	0x88, 0x93, 0xd1, 0xc4, 0xbf, 0x1d, 0x4c, 0x10, 0xb0, 0x05, 0xe3, 0x46, 0x2a, 0xdc, 0xd4, 0xc6,
	0xd2, 0x5b, 0x7b, 0x6f, 0x1b, 0x79, 0x0a, 0x57, 0x47, 0x1f, 0xc7, 0xd1, 0x47, 0x30, 0xf8, 0x22,
	0x86, 0xdb, 0x56, 0x18, 0x24, 0x4e, 0xed, 0xf9, 0xf5, 0xfb, 0xce, 0x39, 0xcd, 0x81, 0xe6, 0xd3,
	0x9c, 0x3d, 0xe2, 0x76, 0x10, 0x12, 0x46, 0xda, 0x94, 0xd9, 0x2c, 0xa2, 0x63, 0x8a, 0xc3, 0xd8,
	0x9d, 0x60, 0x9d, 0x87, 0x48, 0xe2, 0x44, 0x52, 0x68, 0x35, 0xa8, 0x5a, 0x1c, 0x32, 0xf1, 0x73,
	0x84, 0x29, 0xd3, 0x5e, 0x0b, 0x20, 0x65, 0x49, 0xe0, 0xcd, 0xd1, 0x11, 0x14, 0x49, 0xe8, 0x3a,
	0xae, 0x4f, 0x65, 0xa1, 0x59, 0x68, 0x49, 0x9d, 0x86, 0xbe, 0xe6, 0xeb, 0x6b, 0xa8, 0xde, 0xe7,
	0x9c, 0x99, 0xf1, 0xe8, 0x14, 0xca, 0x9e, 0xed, 0x3b, 0x91, 0xed, 0x60, 0x2a, 0xe7, 0xb9, 0xbc,
	0xbb, 0x51, 0xee, 0xa6, 0xa4, 0xb9, 0x72, 0xd0, 0x1e, 0x54, 0x5d, 0x7f, 0x8a, 0x5f, 0xc6, 0x31,
	0x0e, 0xa9, 0x4b, 0x7c, 0xb9, 0xd0, 0x14, 0x5a, 0x65, 0xb3, 0xc2, 0xc3, 0xbb, 0x24, 0x53, 0x4e,
	0x40, 0x4c, 0x06, 0xa3, 0x1d, 0x10, 0x27, 0x24, 0x0c, 0xa2, 0xe5, 0xa6, 0x4b, 0x2e, 0xad, 0x90,
	0x02, 0xa5, 0x10, 0xc7, 0x2e, 0xef, 0x90, 0xe7, 0x5f, 0x7e, 0x6b, 0xe5, 0x5d, 0x80, 0x52, 0x36,
	0x1a, 0x21, 0xd8, 0xf2, 0xed, 0x19, 0x4e, 0x75, 0xfe, 0x8e, 0x2e, 0xa1, 0x48, 0xa3, 0x20, 0x20,
	0x21, 0xe3, 0xee, 0x76, 0x67, 0xff, 0xdf, 0x5f, 0xd0, 0xad, 0x44, 0x30, 0x33, 0x53, 0x3b, 0x86,
	0x62, 0x9a, 0xa1, 0x1a, 0x48, 0xa3, 0x9e, 0x35, 0x1a, 0x0c, 0xfa, 0xe6, 0xd0, 0xb8, 0xaa, 0xe7,
	0x50, 0x1d, 0x2a, 0xc6, 0xfd, 0xc0, 0x30, 0xaf, 0x6f, 0x8c, 0xde, 0xf0, 0xbc, 0x5b, 0x17, 0x50,
	0x15, 0xca, 0x2b, 0x20, 0xdf, 0xb9, 0xcd, 0x4e, 0x64, 0x25, 0x67, 0x44, 0x67, 0x20, 0x26, 0x01,
	0x52, 0xfe, 0xdc, 0x85, 0x1f, 0x52, 0x91, 0x37, 0xed, 0xa9, 0xe5, 0x2e, 0x0e, 0x3e, 0x16, 0xaa,
	0xf0, 0xb9, 0x50, 0x85, 0xaf, 0x85, 0x2a, 0xbc, 0x7d, 0xab, 0x39, 0x68, 0x4c, 0xc8, 0x4c, 0x77,
	0x08, 0x71, 0x3c, 0xac, 0x4f, 0x71, 0xcc, 0x08, 0xf1, 0xe8, 0x7a, 0x83, 0x07, 0x91, 0x3f, 0x0e,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x27, 0xc7, 0x0f, 0x74, 0x60, 0x02, 0x00, 0x00,
}
