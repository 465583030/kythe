// Code generated by protoc-gen-gogo.
// source: kythe/proto/internal.proto
// DO NOT EDIT!

/*
	Package internal_proto is a generated protocol buffer package.

	It is generated from these files:
		kythe/proto/internal.proto

	It has these top-level messages:
		PageToken
		CrossReference
*/
package internal_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import kythe_proto_serving "kythe.io/kythe/proto/serving_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Internal encoding for an EdgesReply/CrossReferencesReply page_token
type PageToken struct {
	// Index into the primary reply sequence.
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Secondary page token for reply sub-query.
	SecondaryToken string `protobuf:"bytes,2,opt,name=secondary_token,proto3" json:"secondary_token,omitempty"`
}

func (m *PageToken) Reset()                    { *m = PageToken{} }
func (m *PageToken) String() string            { return proto.CompactTextString(m) }
func (*PageToken) ProtoMessage()               {}
func (*PageToken) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

// A CrossReference represents a path between two anchors, crossing between a
// single common node.  Abstractly this a
// (file, anchor, kind, node, kind', anchor', file') tuple where the two
// (file, anchor, kind) sub-components have been named Decorations.
//
// This structure can be used to represent the intermediary* structures needed
// to build pre-cached responses to the Decorations and CrossReferences service
// methods.
//
// * where only a subset of this structure is known at that moment in time
type CrossReference struct {
	SourceDecoration *CrossReference_Decoration          `protobuf:"bytes,1,opt,name=source_decoration" json:"source_decoration,omitempty"`
	Referent         *kythe_proto_serving.Node           `protobuf:"bytes,2,opt,name=referent" json:"referent,omitempty"`
	TargetDecoration *CrossReference_Decoration          `protobuf:"bytes,3,opt,name=target_decoration" json:"target_decoration,omitempty"`
	SourceAnchor     *kythe_proto_serving.ExpandedAnchor `protobuf:"bytes,4,opt,name=source_anchor" json:"source_anchor,omitempty"`
	TargetAnchor     *kythe_proto_serving.ExpandedAnchor `protobuf:"bytes,5,opt,name=target_anchor" json:"target_anchor,omitempty"`
}

func (m *CrossReference) Reset()                    { *m = CrossReference{} }
func (m *CrossReference) String() string            { return proto.CompactTextString(m) }
func (*CrossReference) ProtoMessage()               {}
func (*CrossReference) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *CrossReference) GetSourceDecoration() *CrossReference_Decoration {
	if m != nil {
		return m.SourceDecoration
	}
	return nil
}

func (m *CrossReference) GetReferent() *kythe_proto_serving.Node {
	if m != nil {
		return m.Referent
	}
	return nil
}

func (m *CrossReference) GetTargetDecoration() *CrossReference_Decoration {
	if m != nil {
		return m.TargetDecoration
	}
	return nil
}

func (m *CrossReference) GetSourceAnchor() *kythe_proto_serving.ExpandedAnchor {
	if m != nil {
		return m.SourceAnchor
	}
	return nil
}

func (m *CrossReference) GetTargetAnchor() *kythe_proto_serving.ExpandedAnchor {
	if m != nil {
		return m.TargetAnchor
	}
	return nil
}

// A Decoration is specialized partial edge with an anchor on one end, stored
// along side its parent file node.  The partial edge's other end is stored in
// the referent field of the parent CrossReference.
type CrossReference_Decoration struct {
	File   *kythe_proto_serving.File      `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Anchor *kythe_proto_serving.RawAnchor `protobuf:"bytes,2,opt,name=anchor" json:"anchor,omitempty"`
	Kind   string                         `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *CrossReference_Decoration) Reset()         { *m = CrossReference_Decoration{} }
func (m *CrossReference_Decoration) String() string { return proto.CompactTextString(m) }
func (*CrossReference_Decoration) ProtoMessage()    {}
func (*CrossReference_Decoration) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{1, 0}
}

func (m *CrossReference_Decoration) GetFile() *kythe_proto_serving.File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *CrossReference_Decoration) GetAnchor() *kythe_proto_serving.RawAnchor {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func init() {
	proto.RegisterType((*PageToken)(nil), "kythe.proto.internal.PageToken")
	proto.RegisterType((*CrossReference)(nil), "kythe.proto.internal.CrossReference")
	proto.RegisterType((*CrossReference_Decoration)(nil), "kythe.proto.internal.CrossReference.Decoration")
}
func (m *PageToken) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PageToken) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintInternal(data, i, uint64(m.Index))
	}
	if len(m.SecondaryToken) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintInternal(data, i, uint64(len(m.SecondaryToken)))
		i += copy(data[i:], m.SecondaryToken)
	}
	return i, nil
}

func (m *CrossReference) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CrossReference) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SourceDecoration != nil {
		data[i] = 0xa
		i++
		i = encodeVarintInternal(data, i, uint64(m.SourceDecoration.Size()))
		n1, err := m.SourceDecoration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Referent != nil {
		data[i] = 0x12
		i++
		i = encodeVarintInternal(data, i, uint64(m.Referent.Size()))
		n2, err := m.Referent.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TargetDecoration != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintInternal(data, i, uint64(m.TargetDecoration.Size()))
		n3, err := m.TargetDecoration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SourceAnchor != nil {
		data[i] = 0x22
		i++
		i = encodeVarintInternal(data, i, uint64(m.SourceAnchor.Size()))
		n4, err := m.SourceAnchor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TargetAnchor != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintInternal(data, i, uint64(m.TargetAnchor.Size()))
		n5, err := m.TargetAnchor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CrossReference_Decoration) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CrossReference_Decoration) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.File != nil {
		data[i] = 0xa
		i++
		i = encodeVarintInternal(data, i, uint64(m.File.Size()))
		n6, err := m.File.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Anchor != nil {
		data[i] = 0x12
		i++
		i = encodeVarintInternal(data, i, uint64(m.Anchor.Size()))
		n7, err := m.Anchor.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Kind) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintInternal(data, i, uint64(len(m.Kind)))
		i += copy(data[i:], m.Kind)
	}
	return i, nil
}

func encodeFixed64Internal(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Internal(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInternal(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PageToken) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovInternal(uint64(m.Index))
	}
	l = len(m.SecondaryToken)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CrossReference) Size() (n int) {
	var l int
	_ = l
	if m.SourceDecoration != nil {
		l = m.SourceDecoration.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Referent != nil {
		l = m.Referent.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.TargetDecoration != nil {
		l = m.TargetDecoration.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.SourceAnchor != nil {
		l = m.SourceAnchor.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.TargetAnchor != nil {
		l = m.TargetAnchor.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CrossReference_Decoration) Size() (n int) {
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PageToken) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryToken = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossReference) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDecoration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceDecoration == nil {
				m.SourceDecoration = &CrossReference_Decoration{}
			}
			if err := m.SourceDecoration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Referent == nil {
				m.Referent = &kythe_proto_serving.Node{}
			}
			if err := m.Referent.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDecoration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetDecoration == nil {
				m.TargetDecoration = &CrossReference_Decoration{}
			}
			if err := m.TargetDecoration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAnchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceAnchor == nil {
				m.SourceAnchor = &kythe_proto_serving.ExpandedAnchor{}
			}
			if err := m.SourceAnchor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAnchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetAnchor == nil {
				m.TargetAnchor = &kythe_proto_serving.ExpandedAnchor{}
			}
			if err := m.TargetAnchor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossReference_Decoration) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decoration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decoration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &kythe_proto_serving.File{}
			}
			if err := m.File.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &kythe_proto_serving.RawAnchor{}
			}
			if err := m.Anchor.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorInternal = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x51, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0xfe, 0xfb, 0xf7, 0x82, 0x39, 0xb5, 0x5e, 0x06, 0xc1, 0x34, 0x8b, 0x20, 0x75, 0xa1, 0x20,
	0x4c, 0xa0, 0xdd, 0xb9, 0xf3, 0xba, 0x70, 0x21, 0x52, 0xdc, 0x97, 0x31, 0x39, 0x4d, 0x43, 0xca,
	0x4c, 0x99, 0x19, 0xb5, 0x7d, 0x13, 0x9f, 0xc7, 0x95, 0x4b, 0x1f, 0x41, 0xf4, 0x45, 0x9c, 0x4e,
	0xa6, 0x92, 0x42, 0x16, 0xe2, 0x62, 0x16, 0x27, 0xe7, 0xbb, 0x9d, 0x2f, 0x10, 0xe4, 0x0b, 0x3d,
	0xc1, 0x68, 0x26, 0x85, 0x16, 0x51, 0xc6, 0x35, 0x4a, 0xce, 0xa6, 0xd4, 0x8e, 0x64, 0xcf, 0xee,
	0x8a, 0x81, 0xae, 0x76, 0x41, 0xb7, 0xcc, 0x50, 0x28, 0x9f, 0x32, 0x9e, 0x16, 0x98, 0xde, 0x00,
	0xbc, 0x3b, 0x96, 0xe2, 0xbd, 0xc8, 0x91, 0x93, 0x0e, 0x34, 0x33, 0x9e, 0xe0, 0xdc, 0xaf, 0x1d,
	0xd4, 0x8e, 0x9b, 0x64, 0x1f, 0xb6, 0x15, 0xc6, 0x82, 0x27, 0x4c, 0x2e, 0x46, 0x7a, 0x89, 0xf0,
	0xff, 0x9b, 0x85, 0xd7, 0x7b, 0xad, 0xc3, 0xd6, 0x85, 0x14, 0x4a, 0x0d, 0x71, 0x8c, 0x12, 0x79,
	0x8c, 0xe4, 0x06, 0x76, 0x95, 0x78, 0x94, 0x31, 0x8e, 0x12, 0x43, 0x91, 0x4c, 0x67, 0x82, 0x5b,
	0x99, 0x76, 0x3f, 0xa2, 0x55, 0xa1, 0xe8, 0xba, 0x00, 0xbd, 0xfc, 0xa1, 0x91, 0x13, 0xd8, 0x90,
	0xc5, 0x77, 0x6d, 0x0d, 0xdb, 0xfd, 0xee, 0x9a, 0xc4, 0xea, 0x82, 0x5b, 0x91, 0x58, 0x63, 0xcd,
	0x64, 0x8a, 0xba, 0x6c, 0x5c, 0xff, 0x9b, 0xf1, 0x29, 0x74, 0xdc, 0x11, 0x8c, 0xc7, 0x13, 0x21,
	0xfd, 0x86, 0xd5, 0x39, 0xac, 0x74, 0xbf, 0x9a, 0xcf, 0x98, 0x29, 0x2b, 0x39, 0xb3, 0xd0, 0x25,
	0xd7, 0xe5, 0x70, 0xdc, 0xe6, 0xaf, 0xb9, 0x81, 0x02, 0x28, 0xa5, 0x38, 0x82, 0xc6, 0x38, 0x9b,
	0xa2, 0x6b, 0xaf, 0xfa, 0xf4, 0x6b, 0x03, 0x20, 0x14, 0x5a, 0xce, 0xab, 0x68, 0x29, 0xac, 0x84,
	0x0e, 0xd9, 0xb3, 0x8b, 0xb8, 0x09, 0x8d, 0xdc, 0xfc, 0x5f, 0xdb, 0x8e, 0x77, 0xbe, 0xf3, 0xf6,
	0x19, 0xd6, 0xde, 0xcd, 0xfb, 0x30, 0xef, 0xe5, 0x2b, 0xfc, 0xf7, 0xd0, 0xb2, 0xc4, 0xc1, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x90, 0x45, 0x65, 0x61, 0x02, 0x00, 0x00,
}
