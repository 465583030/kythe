// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kythe/proto/internal.proto

/*
Package internal_go_proto is a generated protocol buffer package.

It is generated from these files:
	kythe/proto/internal.proto

It has these top-level messages:
	Source
	PageToken
	CrossReference
	SortedKeyValue
	Path
*/
package internal_go_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import kythe_proto_serving "kythe.io/kythe/proto/serving_go_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Source struct {
	Ticket     string                       `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Facts      map[string][]byte            `protobuf:"bytes,2,rep,name=facts" json:"facts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EdgeGroups map[string]*Source_EdgeGroup `protobuf:"bytes,3,rep,name=edge_groups,json=edgeGroups" json:"edge_groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Source) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Source) GetFacts() map[string][]byte {
	if m != nil {
		return m.Facts
	}
	return nil
}

func (m *Source) GetEdgeGroups() map[string]*Source_EdgeGroup {
	if m != nil {
		return m.EdgeGroups
	}
	return nil
}

type Source_Edge struct {
	Ticket  string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Ordinal int32  `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (m *Source_Edge) Reset()                    { *m = Source_Edge{} }
func (m *Source_Edge) String() string            { return proto.CompactTextString(m) }
func (*Source_Edge) ProtoMessage()               {}
func (*Source_Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Source_Edge) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Source_Edge) GetOrdinal() int32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

type Source_EdgeGroup struct {
	Edges []*Source_Edge `protobuf:"bytes,1,rep,name=edges" json:"edges,omitempty"`
}

func (m *Source_EdgeGroup) Reset()                    { *m = Source_EdgeGroup{} }
func (m *Source_EdgeGroup) String() string            { return proto.CompactTextString(m) }
func (*Source_EdgeGroup) ProtoMessage()               {}
func (*Source_EdgeGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Source_EdgeGroup) GetEdges() []*Source_Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type PageToken struct {
	Index          int32             `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	SecondaryToken []string          `protobuf:"bytes,2,rep,name=secondary_token,json=secondaryToken" json:"secondary_token,omitempty"`
	SubTokens      map[string]string `protobuf:"bytes,3,rep,name=sub_tokens,json=subTokens" json:"sub_tokens,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Indices        map[string]int32  `protobuf:"bytes,4,rep,name=indices" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *PageToken) Reset()                    { *m = PageToken{} }
func (m *PageToken) String() string            { return proto.CompactTextString(m) }
func (*PageToken) ProtoMessage()               {}
func (*PageToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PageToken) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PageToken) GetSecondaryToken() []string {
	if m != nil {
		return m.SecondaryToken
	}
	return nil
}

func (m *PageToken) GetSubTokens() map[string]string {
	if m != nil {
		return m.SubTokens
	}
	return nil
}

func (m *PageToken) GetIndices() map[string]int32 {
	if m != nil {
		return m.Indices
	}
	return nil
}

type CrossReference struct {
	SourceDecoration *CrossReference_Decoration          `protobuf:"bytes,1,opt,name=source_decoration,json=sourceDecoration" json:"source_decoration,omitempty"`
	Referent         *kythe_proto_serving.Node           `protobuf:"bytes,2,opt,name=referent" json:"referent,omitempty"`
	TargetDecoration *CrossReference_Decoration          `protobuf:"bytes,3,opt,name=target_decoration,json=targetDecoration" json:"target_decoration,omitempty"`
	SourceAnchor     *kythe_proto_serving.ExpandedAnchor `protobuf:"bytes,4,opt,name=source_anchor,json=sourceAnchor" json:"source_anchor,omitempty"`
	TargetAnchor     *kythe_proto_serving.ExpandedAnchor `protobuf:"bytes,5,opt,name=target_anchor,json=targetAnchor" json:"target_anchor,omitempty"`
}

func (m *CrossReference) Reset()                    { *m = CrossReference{} }
func (m *CrossReference) String() string            { return proto.CompactTextString(m) }
func (*CrossReference) ProtoMessage()               {}
func (*CrossReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CrossReference) GetSourceDecoration() *CrossReference_Decoration {
	if m != nil {
		return m.SourceDecoration
	}
	return nil
}

func (m *CrossReference) GetReferent() *kythe_proto_serving.Node {
	if m != nil {
		return m.Referent
	}
	return nil
}

func (m *CrossReference) GetTargetDecoration() *CrossReference_Decoration {
	if m != nil {
		return m.TargetDecoration
	}
	return nil
}

func (m *CrossReference) GetSourceAnchor() *kythe_proto_serving.ExpandedAnchor {
	if m != nil {
		return m.SourceAnchor
	}
	return nil
}

func (m *CrossReference) GetTargetAnchor() *kythe_proto_serving.ExpandedAnchor {
	if m != nil {
		return m.TargetAnchor
	}
	return nil
}

type CrossReference_Decoration struct {
	File   *kythe_proto_serving.File      `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Anchor *kythe_proto_serving.RawAnchor `protobuf:"bytes,2,opt,name=anchor" json:"anchor,omitempty"`
	Kind   string                         `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
}

func (m *CrossReference_Decoration) Reset()                    { *m = CrossReference_Decoration{} }
func (m *CrossReference_Decoration) String() string            { return proto.CompactTextString(m) }
func (*CrossReference_Decoration) ProtoMessage()               {}
func (*CrossReference_Decoration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *CrossReference_Decoration) GetFile() *kythe_proto_serving.File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *CrossReference_Decoration) GetAnchor() *kythe_proto_serving.RawAnchor {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *CrossReference_Decoration) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type SortedKeyValue struct {
	Key     string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	SortKey string `protobuf:"bytes,2,opt,name=sort_key,json=sortKey" json:"sort_key,omitempty"`
	Value   []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SortedKeyValue) Reset()                    { *m = SortedKeyValue{} }
func (m *SortedKeyValue) String() string            { return proto.CompactTextString(m) }
func (*SortedKeyValue) ProtoMessage()               {}
func (*SortedKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SortedKeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SortedKeyValue) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

func (m *SortedKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Path struct {
	Pivot *Path_Node   `protobuf:"bytes,1,opt,name=pivot" json:"pivot,omitempty"`
	Edges []*Path_Edge `protobuf:"bytes,2,rep,name=edges" json:"edges,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Path) GetPivot() *Path_Node {
	if m != nil {
		return m.Pivot
	}
	return nil
}

func (m *Path) GetEdges() []*Path_Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Path_Node struct {
	// Types that are valid to be assigned to Specialization:
	//	*Path_Node_RawAnchor
	//	*Path_Node_ExpandedAnchor
	//	*Path_Node_File
	Specialization isPath_Node_Specialization `protobuf_oneof:"specialization"`
	Ticket         string                     `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	NodeKind       string                     `protobuf:"bytes,2,opt,name=node_kind,json=nodeKind" json:"node_kind,omitempty"`
	Original       *kythe_proto_serving.Node  `protobuf:"bytes,3,opt,name=original" json:"original,omitempty"`
}

func (m *Path_Node) Reset()                    { *m = Path_Node{} }
func (m *Path_Node) String() string            { return proto.CompactTextString(m) }
func (*Path_Node) ProtoMessage()               {}
func (*Path_Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type isPath_Node_Specialization interface{ isPath_Node_Specialization() }

type Path_Node_RawAnchor struct {
	RawAnchor *kythe_proto_serving.RawAnchor `protobuf:"bytes,10,opt,name=raw_anchor,json=rawAnchor,oneof"`
}
type Path_Node_ExpandedAnchor struct {
	ExpandedAnchor *kythe_proto_serving.ExpandedAnchor `protobuf:"bytes,11,opt,name=expanded_anchor,json=expandedAnchor,oneof"`
}
type Path_Node_File struct {
	File *kythe_proto_serving.File `protobuf:"bytes,12,opt,name=file,oneof"`
}

func (*Path_Node_RawAnchor) isPath_Node_Specialization()      {}
func (*Path_Node_ExpandedAnchor) isPath_Node_Specialization() {}
func (*Path_Node_File) isPath_Node_Specialization()           {}

func (m *Path_Node) GetSpecialization() isPath_Node_Specialization {
	if m != nil {
		return m.Specialization
	}
	return nil
}

func (m *Path_Node) GetRawAnchor() *kythe_proto_serving.RawAnchor {
	if x, ok := m.GetSpecialization().(*Path_Node_RawAnchor); ok {
		return x.RawAnchor
	}
	return nil
}

func (m *Path_Node) GetExpandedAnchor() *kythe_proto_serving.ExpandedAnchor {
	if x, ok := m.GetSpecialization().(*Path_Node_ExpandedAnchor); ok {
		return x.ExpandedAnchor
	}
	return nil
}

func (m *Path_Node) GetFile() *kythe_proto_serving.File {
	if x, ok := m.GetSpecialization().(*Path_Node_File); ok {
		return x.File
	}
	return nil
}

func (m *Path_Node) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *Path_Node) GetNodeKind() string {
	if m != nil {
		return m.NodeKind
	}
	return ""
}

func (m *Path_Node) GetOriginal() *kythe_proto_serving.Node {
	if m != nil {
		return m.Original
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Path_Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Path_Node_OneofMarshaler, _Path_Node_OneofUnmarshaler, _Path_Node_OneofSizer, []interface{}{
		(*Path_Node_RawAnchor)(nil),
		(*Path_Node_ExpandedAnchor)(nil),
		(*Path_Node_File)(nil),
	}
}

func _Path_Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Path_Node)
	// specialization
	switch x := m.Specialization.(type) {
	case *Path_Node_RawAnchor:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RawAnchor); err != nil {
			return err
		}
	case *Path_Node_ExpandedAnchor:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExpandedAnchor); err != nil {
			return err
		}
	case *Path_Node_File:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Path_Node.Specialization has unexpected type %T", x)
	}
	return nil
}

func _Path_Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Path_Node)
	switch tag {
	case 10: // specialization.raw_anchor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(kythe_proto_serving.RawAnchor)
		err := b.DecodeMessage(msg)
		m.Specialization = &Path_Node_RawAnchor{msg}
		return true, err
	case 11: // specialization.expanded_anchor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(kythe_proto_serving.ExpandedAnchor)
		err := b.DecodeMessage(msg)
		m.Specialization = &Path_Node_ExpandedAnchor{msg}
		return true, err
	case 12: // specialization.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(kythe_proto_serving.File)
		err := b.DecodeMessage(msg)
		m.Specialization = &Path_Node_File{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Path_Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Path_Node)
	// specialization
	switch x := m.Specialization.(type) {
	case *Path_Node_RawAnchor:
		s := proto.Size(x.RawAnchor)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Path_Node_ExpandedAnchor:
		s := proto.Size(x.ExpandedAnchor)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Path_Node_File:
		s := proto.Size(x.File)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Path_Edge struct {
	Kind    string     `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Ordinal int32      `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
	Target  *Path_Node `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
}

func (m *Path_Edge) Reset()                    { *m = Path_Edge{} }
func (m *Path_Edge) String() string            { return proto.CompactTextString(m) }
func (*Path_Edge) ProtoMessage()               {}
func (*Path_Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func (m *Path_Edge) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Path_Edge) GetOrdinal() int32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *Path_Edge) GetTarget() *Path_Node {
	if m != nil {
		return m.Target
	}
	return nil
}

func init() {
	proto.RegisterType((*Source)(nil), "kythe.proto.internal.Source")
	proto.RegisterType((*Source_Edge)(nil), "kythe.proto.internal.Source.Edge")
	proto.RegisterType((*Source_EdgeGroup)(nil), "kythe.proto.internal.Source.EdgeGroup")
	proto.RegisterType((*PageToken)(nil), "kythe.proto.internal.PageToken")
	proto.RegisterType((*CrossReference)(nil), "kythe.proto.internal.CrossReference")
	proto.RegisterType((*CrossReference_Decoration)(nil), "kythe.proto.internal.CrossReference.Decoration")
	proto.RegisterType((*SortedKeyValue)(nil), "kythe.proto.internal.SortedKeyValue")
	proto.RegisterType((*Path)(nil), "kythe.proto.internal.Path")
	proto.RegisterType((*Path_Node)(nil), "kythe.proto.internal.Path.Node")
	proto.RegisterType((*Path_Edge)(nil), "kythe.proto.internal.Path.Edge")
}

func init() { proto.RegisterFile("kythe/proto/internal.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xd1, 0x6e, 0xdb, 0x36,
	0x14, 0x8d, 0x6d, 0xc9, 0x89, 0xae, 0x3d, 0x27, 0x23, 0x8a, 0x41, 0xd1, 0x80, 0x35, 0xf5, 0x80,
	0x35, 0x0f, 0x9b, 0x0c, 0x64, 0xe8, 0x1a, 0x14, 0x1d, 0x86, 0x75, 0x4d, 0xe6, 0x21, 0x68, 0x51,
	0xd0, 0xc3, 0x9e, 0x06, 0x18, 0x8a, 0x74, 0x23, 0x13, 0x56, 0x49, 0x83, 0xa2, 0x9d, 0x78, 0x3f,
	0xb0, 0xef, 0xd8, 0xfb, 0xbe, 0x63, 0xaf, 0xfb, 0x80, 0xfd, 0xcc, 0x20, 0x92, 0xb2, 0xe5, 0x41,
	0x8e, 0xb3, 0x3e, 0x49, 0x97, 0x3c, 0xf7, 0xdc, 0x43, 0x9e, 0x4b, 0x12, 0x82, 0xe9, 0x52, 0x4d,
	0x70, 0x30, 0x93, 0x42, 0x89, 0x01, 0xe3, 0x0a, 0x25, 0x8f, 0xb2, 0x50, 0x87, 0xe4, 0x91, 0x9e,
	0x33, 0x41, 0x58, 0xce, 0x05, 0xc7, 0xd5, 0x8c, 0x1c, 0xe5, 0x82, 0xf1, 0xd4, 0x60, 0xfa, 0x7f,
	0xb7, 0xa0, 0x3d, 0x12, 0x73, 0x19, 0x23, 0xf9, 0x04, 0xda, 0x8a, 0xc5, 0x53, 0x54, 0x7e, 0xe3,
	0xa4, 0x71, 0xea, 0x51, 0x1b, 0x91, 0x6f, 0xc1, 0xbd, 0x89, 0x62, 0x95, 0xfb, 0xcd, 0x93, 0xd6,
	0x69, 0xe7, 0xec, 0x69, 0x58, 0x57, 0x23, 0x34, 0x24, 0xe1, 0x65, 0x81, 0xbc, 0xe0, 0x4a, 0x2e,
	0xa9, 0xc9, 0x22, 0x6f, 0xa0, 0x83, 0x49, 0x8a, 0xe3, 0x54, 0x8a, 0xf9, 0x2c, 0xf7, 0x5b, 0x9a,
	0xe4, 0xcb, 0x7b, 0x49, 0x2e, 0x92, 0x14, 0x7f, 0xd4, 0x70, 0xc3, 0x04, 0xb8, 0x1a, 0x08, 0xce,
	0xc1, 0x29, 0xa6, 0xb7, 0xaa, 0xf5, 0x61, 0x5f, 0xc8, 0x84, 0xf1, 0x28, 0xf3, 0x9b, 0x27, 0x8d,
	0x53, 0x97, 0x96, 0x61, 0xf0, 0x1a, 0xbc, 0x15, 0x31, 0x79, 0x0e, 0x6e, 0x41, 0x9a, 0xfb, 0x0d,
	0xad, 0xe7, 0xc9, 0x4e, 0x3d, 0xd4, 0xe0, 0x83, 0x73, 0x80, 0xf5, 0x1a, 0xc9, 0x11, 0xb4, 0xa6,
	0xb8, 0xb4, 0x12, 0x8a, 0x5f, 0xf2, 0x08, 0xdc, 0x45, 0x94, 0xcd, 0x51, 0x57, 0xef, 0x52, 0x13,
	0xbc, 0x68, 0x9e, 0x37, 0x02, 0x84, 0xc3, 0xff, 0x2c, 0xac, 0x26, 0xfd, 0x65, 0x35, 0xbd, 0x73,
	0xf6, 0xc5, 0xc3, 0xf6, 0xa9, 0x52, 0xa6, 0xff, 0x4f, 0x13, 0xbc, 0x77, 0x51, 0x8a, 0x3f, 0x8b,
	0x29, 0xf2, 0x42, 0x0e, 0xe3, 0x09, 0xde, 0xe9, 0x1a, 0x2e, 0x35, 0x01, 0x79, 0x0a, 0x87, 0x39,
	0xc6, 0x82, 0x27, 0x91, 0x5c, 0x8e, 0x55, 0x01, 0xd4, 0xe6, 0x7a, 0xb4, 0xb7, 0x1a, 0x36, 0xe9,
	0x6f, 0x00, 0xf2, 0xf9, 0xb5, 0x81, 0x94, 0xde, 0x85, 0xf5, 0x9a, 0x56, 0x35, 0xc3, 0xd1, 0xfc,
	0x5a, 0xff, 0x58, 0xf7, 0xbc, 0xbc, 0x8c, 0xc9, 0x25, 0xec, 0x33, 0x9e, 0xb0, 0x18, 0x73, 0xdf,
	0xb9, 0xaf, 0x0f, 0xd6, 0x5c, 0x3f, 0x19, 0xb8, 0x61, 0x2a, 0x93, 0x83, 0x97, 0xd0, 0xdb, 0x2c,
	0xb2, 0xcb, 0x08, 0xaf, 0x6a, 0xc4, 0x0b, 0xe8, 0x56, 0x69, 0x77, 0xe5, 0xba, 0xd5, 0xdd, 0xfd,
	0xc3, 0x81, 0xde, 0x0f, 0x52, 0xe4, 0x39, 0xc5, 0x1b, 0x94, 0xc8, 0x63, 0x24, 0xbf, 0xc2, 0xc7,
	0xb9, 0xf6, 0x63, 0x9c, 0x60, 0x2c, 0x64, 0xa4, 0x98, 0xe0, 0x9a, 0xac, 0x73, 0x36, 0xa8, 0x5f,
	0xde, 0x26, 0x41, 0xf8, 0x7a, 0x95, 0x46, 0x8f, 0x0c, 0xd3, 0x7a, 0x84, 0x3c, 0x83, 0x03, 0x69,
	0x90, 0xca, 0xf6, 0xc4, 0xf1, 0x06, 0x69, 0x79, 0x9c, 0xdf, 0x8a, 0x04, 0xe9, 0x0a, 0x5a, 0x88,
	0x52, 0x91, 0x4c, 0x51, 0x55, 0x45, 0xb5, 0x3e, 0x50, 0x94, 0x61, 0xaa, 0x88, 0x1a, 0xc2, 0x47,
	0x76, 0xc9, 0x11, 0x8f, 0x27, 0x42, 0xfa, 0x8e, 0x66, 0xfe, 0xbc, 0x56, 0xd9, 0xc5, 0xdd, 0x2c,
	0xe2, 0x09, 0x26, 0xdf, 0x6b, 0x28, 0xed, 0x9a, 0x4c, 0x13, 0x15, 0x4c, 0x56, 0xa7, 0x65, 0x72,
	0xff, 0x07, 0x93, 0xc9, 0x34, 0x51, 0xf0, 0x7b, 0x03, 0xa0, 0x22, 0xf1, 0x2b, 0x70, 0x6e, 0x58,
	0x86, 0xd6, 0x88, 0xfa, 0x3d, 0xbb, 0x64, 0x19, 0x52, 0x0d, 0x23, 0xdf, 0x40, 0xdb, 0x0a, 0x30,
	0x9b, 0xfc, 0x59, 0x6d, 0x02, 0x8d, 0x6e, 0x6d, 0x6d, 0x8b, 0x26, 0x04, 0x9c, 0x29, 0xe3, 0x89,
	0xde, 0x5a, 0x8f, 0xea, 0xff, 0xfe, 0x08, 0x7a, 0x23, 0x21, 0x15, 0x26, 0x57, 0xb8, 0xfc, 0xa5,
	0xe8, 0x9c, 0x9a, 0x0e, 0x3b, 0x86, 0x83, 0x5c, 0x48, 0x35, 0x2e, 0x86, 0x4d, 0x83, 0xee, 0x17,
	0xf1, 0x55, 0xb5, 0xf9, 0x5a, 0x95, 0x1b, 0xa4, 0xff, 0xa7, 0x03, 0xce, 0xbb, 0x48, 0x4d, 0xc8,
	0x33, 0x70, 0x67, 0x6c, 0x21, 0x94, 0x5d, 0xd9, 0xe3, 0x6d, 0x27, 0x48, 0x4d, 0x4c, 0x4f, 0x18,
	0x74, 0x91, 0x66, 0x2e, 0x3c, 0x73, 0x8b, 0xdf, 0x97, 0x56, 0xbd, 0xee, 0xfe, 0x6a, 0x82, 0x53,
	0xd0, 0x90, 0xef, 0x00, 0x64, 0x74, 0x5b, 0xba, 0x04, 0x0f, 0xd9, 0xa4, 0xe1, 0x1e, 0xf5, 0x64,
	0x19, 0x90, 0xb7, 0x70, 0x88, 0xd6, 0xbf, 0x92, 0xa5, 0xf3, 0x60, 0xaf, 0x87, 0x7b, 0xb4, 0x87,
	0x1b, 0x23, 0x64, 0x60, 0x0d, 0xee, 0xee, 0x30, 0x78, 0xb8, 0x67, 0x2d, 0xde, 0xf6, 0x62, 0x7c,
	0x0a, 0x1e, 0x17, 0x09, 0x8e, 0xb5, 0x8f, 0xc6, 0x8b, 0x83, 0x62, 0xe0, 0x8a, 0xf1, 0xa4, 0x38,
	0x7e, 0x42, 0xb2, 0x54, 0xbf, 0x27, 0xad, 0x9d, 0xc7, 0xaf, 0x84, 0xbe, 0x3a, 0x82, 0x5e, 0x3e,
	0xc3, 0x98, 0x45, 0x19, 0xfb, 0x4d, 0xf7, 0x63, 0xf0, 0xde, 0xbe, 0x5b, 0x65, 0xc3, 0x34, 0xd6,
	0x0d, 0xb3, 0xfd, 0xcd, 0x22, 0xcf, 0xa1, 0x6d, 0x9a, 0xdc, 0x16, 0xdf, 0xe9, 0xb6, 0x85, 0xbf,
	0x7a, 0x02, 0x8f, 0x63, 0xf1, 0x3e, 0x4c, 0x85, 0x48, 0x33, 0x0c, 0x13, 0x5c, 0x28, 0x21, 0xb2,
	0xbc, 0x9a, 0x7d, 0xdd, 0xd6, 0x9f, 0xaf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x57, 0x76,
	0xd9, 0x50, 0x08, 0x00, 0x00,
}
