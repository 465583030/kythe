// Code generated by protoc-gen-gogo.
// source: kythe/proto/cxx.proto
// DO NOT EDIT!

/*
	Package cxx_proto is a generated protocol buffer package.

	It is generated from these files:
		kythe/proto/cxx.proto

	It has these top-level messages:
		CxxCompilationUnitDetails
*/
package cxx_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// C++-specific details used in a CompilationUnit.
// Its type is "kythe.io/proto/kythe.proto.CxxCompilationUnitDetails".
type CxxCompilationUnitDetails struct {
	HeaderSearchInfo   *CxxCompilationUnitDetails_HeaderSearchInfo     `protobuf:"bytes,1,opt,name=header_search_info,json=headerSearchInfo" json:"header_search_info,omitempty"`
	SystemHeaderPrefix []*CxxCompilationUnitDetails_SystemHeaderPrefix `protobuf:"bytes,2,rep,name=system_header_prefix,json=systemHeaderPrefix" json:"system_header_prefix,omitempty"`
	StatPath           []*CxxCompilationUnitDetails_StatPath           `protobuf:"bytes,3,rep,name=stat_path,json=statPath" json:"stat_path,omitempty"`
}

func (m *CxxCompilationUnitDetails) Reset()                    { *m = CxxCompilationUnitDetails{} }
func (m *CxxCompilationUnitDetails) String() string            { return proto.CompactTextString(m) }
func (*CxxCompilationUnitDetails) ProtoMessage()               {}
func (*CxxCompilationUnitDetails) Descriptor() ([]byte, []int) { return fileDescriptorCxx, []int{0} }

func (m *CxxCompilationUnitDetails) GetHeaderSearchInfo() *CxxCompilationUnitDetails_HeaderSearchInfo {
	if m != nil {
		return m.HeaderSearchInfo
	}
	return nil
}

func (m *CxxCompilationUnitDetails) GetSystemHeaderPrefix() []*CxxCompilationUnitDetails_SystemHeaderPrefix {
	if m != nil {
		return m.SystemHeaderPrefix
	}
	return nil
}

func (m *CxxCompilationUnitDetails) GetStatPath() []*CxxCompilationUnitDetails_StatPath {
	if m != nil {
		return m.StatPath
	}
	return nil
}

// A path used to search for compilation resources.
type CxxCompilationUnitDetails_HeaderSearchDir struct {
	// The path to search in. If relative, is relative to working_directory.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The kind of data stored in this directory.
	// For C++, {0 = user code, 1 = system code, 2 = "extern C" system code}.
	CharacteristicKind int32 `protobuf:"varint,2,opt,name=characteristic_kind,json=characteristicKind,proto3" json:"characteristic_kind,omitempty"`
	// If true, this directory is a framework.
	IsFramework bool `protobuf:"varint,3,opt,name=is_framework,json=isFramework,proto3" json:"is_framework,omitempty"`
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) Reset() {
	*m = CxxCompilationUnitDetails_HeaderSearchDir{}
}
func (m *CxxCompilationUnitDetails_HeaderSearchDir) String() string { return proto.CompactTextString(m) }
func (*CxxCompilationUnitDetails_HeaderSearchDir) ProtoMessage()    {}
func (*CxxCompilationUnitDetails_HeaderSearchDir) Descriptor() ([]byte, []int) {
	return fileDescriptorCxx, []int{0, 0}
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) GetCharacteristicKind() int32 {
	if m != nil {
		return m.CharacteristicKind
	}
	return 0
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) GetIsFramework() bool {
	if m != nil {
		return m.IsFramework
	}
	return false
}

// Configuration for header search. This may be a function
// of more state than is reflected in the environment and compiler
// arguments.
type CxxCompilationUnitDetails_HeaderSearchInfo struct {
	// For C-family languages, the index of the first directory to require <>s.
	FirstAngledDir int32 `protobuf:"varint,1,opt,name=first_angled_dir,json=firstAngledDir,proto3" json:"first_angled_dir,omitempty"`
	// For C-family languages, the index of the first directory to have the
	// 'system_header' property.
	FirstSystemDir int32 `protobuf:"varint,2,opt,name=first_system_dir,json=firstSystemDir,proto3" json:"first_system_dir,omitempty"`
	// All search directories, ordered as {quoted, angled, system}.
	Dir []*CxxCompilationUnitDetails_HeaderSearchDir `protobuf:"bytes,3,rep,name=dir" json:"dir,omitempty"`
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) Reset() {
	*m = CxxCompilationUnitDetails_HeaderSearchInfo{}
}
func (m *CxxCompilationUnitDetails_HeaderSearchInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CxxCompilationUnitDetails_HeaderSearchInfo) ProtoMessage() {}
func (*CxxCompilationUnitDetails_HeaderSearchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCxx, []int{0, 1}
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) GetFirstAngledDir() int32 {
	if m != nil {
		return m.FirstAngledDir
	}
	return 0
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) GetFirstSystemDir() int32 {
	if m != nil {
		return m.FirstSystemDir
	}
	return 0
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) GetDir() []*CxxCompilationUnitDetails_HeaderSearchDir {
	if m != nil {
		return m.Dir
	}
	return nil
}

// Overrides the default assignment for the 'system_header' property for
// C-family languages for both quoted and angled includes. The last matching
// entry has effect.
type CxxCompilationUnitDetails_SystemHeaderPrefix struct {
	// Matches if the include path has this string as a prefix.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Controls whether the matched path has the 'system_header' property.
	IsSystemHeader bool `protobuf:"varint,2,opt,name=is_system_header,json=isSystemHeader,proto3" json:"is_system_header,omitempty"`
}

func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) Reset() {
	*m = CxxCompilationUnitDetails_SystemHeaderPrefix{}
}
func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) String() string {
	return proto.CompactTextString(m)
}
func (*CxxCompilationUnitDetails_SystemHeaderPrefix) ProtoMessage() {}
func (*CxxCompilationUnitDetails_SystemHeaderPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptorCxx, []int{0, 2}
}

func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) GetIsSystemHeader() bool {
	if m != nil {
		return m.IsSystemHeader
	}
	return false
}

// Adds an additional path to the indexer's virtual file system that
// has no content (or has zero-length content).
type CxxCompilationUnitDetails_StatPath struct {
	// The path to add. Assumed to be a directory.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *CxxCompilationUnitDetails_StatPath) Reset()         { *m = CxxCompilationUnitDetails_StatPath{} }
func (m *CxxCompilationUnitDetails_StatPath) String() string { return proto.CompactTextString(m) }
func (*CxxCompilationUnitDetails_StatPath) ProtoMessage()    {}
func (*CxxCompilationUnitDetails_StatPath) Descriptor() ([]byte, []int) {
	return fileDescriptorCxx, []int{0, 3}
}

func (m *CxxCompilationUnitDetails_StatPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*CxxCompilationUnitDetails)(nil), "kythe.proto.CxxCompilationUnitDetails")
	proto.RegisterType((*CxxCompilationUnitDetails_HeaderSearchDir)(nil), "kythe.proto.CxxCompilationUnitDetails.HeaderSearchDir")
	proto.RegisterType((*CxxCompilationUnitDetails_HeaderSearchInfo)(nil), "kythe.proto.CxxCompilationUnitDetails.HeaderSearchInfo")
	proto.RegisterType((*CxxCompilationUnitDetails_SystemHeaderPrefix)(nil), "kythe.proto.CxxCompilationUnitDetails.SystemHeaderPrefix")
	proto.RegisterType((*CxxCompilationUnitDetails_StatPath)(nil), "kythe.proto.CxxCompilationUnitDetails.StatPath")
}
func (m *CxxCompilationUnitDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CxxCompilationUnitDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeaderSearchInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCxx(dAtA, i, uint64(m.HeaderSearchInfo.Size()))
		n1, err := m.HeaderSearchInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.SystemHeaderPrefix) > 0 {
		for _, msg := range m.SystemHeaderPrefix {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCxx(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StatPath) > 0 {
		for _, msg := range m.StatPath {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCxx(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCxx(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.CharacteristicKind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCxx(dAtA, i, uint64(m.CharacteristicKind))
	}
	if m.IsFramework {
		dAtA[i] = 0x18
		i++
		if m.IsFramework {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FirstAngledDir != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCxx(dAtA, i, uint64(m.FirstAngledDir))
	}
	if m.FirstSystemDir != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCxx(dAtA, i, uint64(m.FirstSystemDir))
	}
	if len(m.Dir) > 0 {
		for _, msg := range m.Dir {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCxx(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCxx(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if m.IsSystemHeader {
		dAtA[i] = 0x10
		i++
		if m.IsSystemHeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CxxCompilationUnitDetails_StatPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CxxCompilationUnitDetails_StatPath) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCxx(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	return i, nil
}

func encodeFixed64Cxx(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cxx(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCxx(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CxxCompilationUnitDetails) Size() (n int) {
	var l int
	_ = l
	if m.HeaderSearchInfo != nil {
		l = m.HeaderSearchInfo.Size()
		n += 1 + l + sovCxx(uint64(l))
	}
	if len(m.SystemHeaderPrefix) > 0 {
		for _, e := range m.SystemHeaderPrefix {
			l = e.Size()
			n += 1 + l + sovCxx(uint64(l))
		}
	}
	if len(m.StatPath) > 0 {
		for _, e := range m.StatPath {
			l = e.Size()
			n += 1 + l + sovCxx(uint64(l))
		}
	}
	return n
}

func (m *CxxCompilationUnitDetails_HeaderSearchDir) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCxx(uint64(l))
	}
	if m.CharacteristicKind != 0 {
		n += 1 + sovCxx(uint64(m.CharacteristicKind))
	}
	if m.IsFramework {
		n += 2
	}
	return n
}

func (m *CxxCompilationUnitDetails_HeaderSearchInfo) Size() (n int) {
	var l int
	_ = l
	if m.FirstAngledDir != 0 {
		n += 1 + sovCxx(uint64(m.FirstAngledDir))
	}
	if m.FirstSystemDir != 0 {
		n += 1 + sovCxx(uint64(m.FirstSystemDir))
	}
	if len(m.Dir) > 0 {
		for _, e := range m.Dir {
			l = e.Size()
			n += 1 + l + sovCxx(uint64(l))
		}
	}
	return n
}

func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovCxx(uint64(l))
	}
	if m.IsSystemHeader {
		n += 2
	}
	return n
}

func (m *CxxCompilationUnitDetails_StatPath) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCxx(uint64(l))
	}
	return n
}

func sovCxx(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCxx(x uint64) (n int) {
	return sovCxx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CxxCompilationUnitDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCxx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CxxCompilationUnitDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CxxCompilationUnitDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderSearchInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderSearchInfo == nil {
				m.HeaderSearchInfo = &CxxCompilationUnitDetails_HeaderSearchInfo{}
			}
			if err := m.HeaderSearchInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemHeaderPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemHeaderPrefix = append(m.SystemHeaderPrefix, &CxxCompilationUnitDetails_SystemHeaderPrefix{})
			if err := m.SystemHeaderPrefix[len(m.SystemHeaderPrefix)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatPath = append(m.StatPath, &CxxCompilationUnitDetails_StatPath{})
			if err := m.StatPath[len(m.StatPath)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCxx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCxx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CxxCompilationUnitDetails_HeaderSearchDir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCxx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderSearchDir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderSearchDir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacteristicKind", wireType)
			}
			m.CharacteristicKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CharacteristicKind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFramework", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFramework = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCxx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCxx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CxxCompilationUnitDetails_HeaderSearchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCxx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderSearchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderSearchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstAngledDir", wireType)
			}
			m.FirstAngledDir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstAngledDir |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSystemDir", wireType)
			}
			m.FirstSystemDir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstSystemDir |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = append(m.Dir, &CxxCompilationUnitDetails_HeaderSearchDir{})
			if err := m.Dir[len(m.Dir)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCxx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCxx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CxxCompilationUnitDetails_SystemHeaderPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCxx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemHeaderPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemHeaderPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSystemHeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSystemHeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCxx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCxx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CxxCompilationUnitDetails_StatPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCxx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCxx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCxx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCxx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCxx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCxx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCxx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCxx
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCxx
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCxx(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCxx = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCxx   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kythe/proto/cxx.proto", fileDescriptorCxx) }

var fileDescriptorCxx = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x13, 0x52, 0xa5, 0x13, 0x54, 0xa2, 0xe5, 0x47, 0x26, 0x07, 0x13, 0x38, 0xf9, 0xe4,
	0x88, 0x22, 0x81, 0x38, 0x42, 0x23, 0x54, 0x04, 0x87, 0x6a, 0x2b, 0xb8, 0xae, 0x16, 0x7b, 0x1d,
	0x8f, 0xe2, 0x78, 0xad, 0xdd, 0x11, 0x38, 0x6f, 0xc2, 0x63, 0xf0, 0x18, 0x1c, 0x79, 0x04, 0x94,
	0xbe, 0x08, 0xf2, 0xda, 0x45, 0x6e, 0x0b, 0x52, 0xc4, 0xc9, 0xb3, 0xdf, 0x8e, 0xbf, 0x6f, 0xe6,
	0xfb, 0x16, 0x1e, 0xac, 0xb7, 0x94, 0xeb, 0x45, 0x65, 0x0d, 0x99, 0x45, 0x52, 0xd7, 0xb1, 0xaf,
	0xf8, 0xc4, 0xc3, 0xed, 0xe1, 0xe9, 0xc5, 0x08, 0x1e, 0x9d, 0xd4, 0xf5, 0x89, 0xd9, 0x54, 0x58,
	0x28, 0x42, 0x53, 0x7e, 0x2c, 0x91, 0x96, 0x9a, 0x14, 0x16, 0x8e, 0x6b, 0xe0, 0xb9, 0x56, 0xa9,
	0xb6, 0xd2, 0x69, 0x65, 0x93, 0x5c, 0x62, 0x99, 0x99, 0x80, 0xcd, 0x59, 0x34, 0x39, 0x7e, 0x19,
	0xf7, 0x78, 0xe2, 0x7f, 0x72, 0xc4, 0xa7, 0x9e, 0xe0, 0xdc, 0xff, 0xff, 0xae, 0xcc, 0x8c, 0x98,
	0xe6, 0xd7, 0x10, 0xbe, 0x86, 0xfb, 0x6e, 0xeb, 0x48, 0x6f, 0x64, 0xa7, 0x56, 0x59, 0x9d, 0x61,
	0x1d, 0x0c, 0xe6, 0xc3, 0x68, 0x72, 0xfc, 0x6a, 0x4f, 0xa1, 0x73, 0x4f, 0xd1, 0xca, 0x9d, 0x79,
	0x02, 0xc1, 0xdd, 0x0d, 0x8c, 0x7f, 0x80, 0x43, 0x47, 0x8a, 0x64, 0xa5, 0x28, 0x0f, 0x86, 0x5e,
	0x61, 0xb1, 0xaf, 0x02, 0x29, 0x3a, 0x53, 0x94, 0x8b, 0xb1, 0xeb, 0xaa, 0xd9, 0x16, 0xee, 0xf6,
	0x17, 0x5c, 0xa2, 0xe5, 0x1c, 0x6e, 0x7b, 0xee, 0xc6, 0xa6, 0x43, 0xe1, 0x6b, 0xbe, 0x80, 0x7b,
	0x49, 0xae, 0xac, 0x4a, 0x48, 0x5b, 0x74, 0x84, 0x89, 0x5c, 0x63, 0x99, 0x06, 0x83, 0x39, 0x8b,
	0x46, 0x82, 0x5f, 0xbd, 0x7a, 0x8f, 0x65, 0xca, 0x9f, 0xc0, 0x1d, 0x74, 0x32, 0xb3, 0x6a, 0xa3,
	0xbf, 0x1a, 0xbb, 0x0e, 0x86, 0x73, 0x16, 0x8d, 0xc5, 0x04, 0xdd, 0xdb, 0x4b, 0x68, 0xf6, 0x9d,
	0xc1, 0xf4, 0xba, 0xb9, 0x3c, 0x82, 0x69, 0x86, 0xd6, 0x91, 0x54, 0xe5, 0xaa, 0xd0, 0xa9, 0x4c,
	0xd1, 0xfa, 0x41, 0x46, 0xe2, 0xc8, 0xe3, 0xaf, 0x3d, 0xdc, 0x8c, 0xf9, 0xa7, 0xb3, 0xb3, 0xbe,
	0xe9, 0x1c, 0xf4, 0x3a, 0x5b, 0x3b, 0x9b, 0xce, 0x53, 0x18, 0x36, 0x97, 0xad, 0x57, 0x2f, 0xfe,
	0x23, 0xf6, 0x25, 0x5a, 0xd1, 0x50, 0xcc, 0x3e, 0x01, 0xbf, 0x99, 0x12, 0x7f, 0x08, 0x07, 0x5d,
	0xe0, 0xad, 0x65, 0xdd, 0xa9, 0x99, 0x10, 0x9d, 0xbc, 0xf2, 0x32, 0xfc, 0x84, 0x63, 0x71, 0x84,
	0xae, 0xcf, 0x33, 0x0b, 0x61, 0x7c, 0x99, 0xcd, 0xdf, 0xec, 0x7f, 0xf3, 0xec, 0xc7, 0x2e, 0x64,
	0x3f, 0x77, 0x21, 0xfb, 0xb5, 0x0b, 0xd9, 0xb7, 0x8b, 0xf0, 0x16, 0x3c, 0x4e, 0xcc, 0x26, 0x5e,
	0x19, 0xb3, 0x2a, 0x74, 0x9c, 0xea, 0x2f, 0x64, 0x4c, 0xe1, 0xfa, 0x9b, 0x7d, 0x3e, 0xf0, 0x9f,
	0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xed, 0x70, 0x6f, 0x45, 0x03, 0x00, 0x00,
}
