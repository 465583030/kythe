// Code generated by protoc-gen-gogo.
// source: kythe/proto/identifier.proto
// DO NOT EDIT!

/*
	Package identifier_proto is a generated protocol buffer package.

	It is generated from these files:
		kythe/proto/identifier.proto

	It has these top-level messages:
		FindRequest
		FindReply
*/
package identifier_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindRequest struct {
	// The qualified name of the identifier being searched for
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Restricts the matches to the given corpus labels.
	Corpus []string `protobuf:"bytes,2,rep,name=corpus" json:"corpus,omitempty"`
	// Restricts the match to the given languages.
	Languages []string `protobuf:"bytes,3,rep,name=languages" json:"languages,omitempty"`
}

func (m *FindRequest) Reset()                    { *m = FindRequest{} }
func (m *FindRequest) String() string            { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()               {}
func (*FindRequest) Descriptor() ([]byte, []int) { return fileDescriptorIdentifier, []int{0} }

func (m *FindRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *FindRequest) GetCorpus() []string {
	if m != nil {
		return m.Corpus
	}
	return nil
}

func (m *FindRequest) GetLanguages() []string {
	if m != nil {
		return m.Languages
	}
	return nil
}

type FindReply struct {
	// The list of matches found
	Matches []*FindReply_Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *FindReply) Reset()                    { *m = FindReply{} }
func (m *FindReply) String() string            { return proto.CompactTextString(m) }
func (*FindReply) ProtoMessage()               {}
func (*FindReply) Descriptor() ([]byte, []int) { return fileDescriptorIdentifier, []int{1} }

func (m *FindReply) GetMatches() []*FindReply_Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type FindReply_Match struct {
	// Kythe ticket for the matched node.
	Ticket string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// Kind of the node being referenced.
	NodeKind string `protobuf:"bytes,2,opt,name=node_kind,json=nodeKind,proto3" json:"node_kind,omitempty"`
	// Subkind of the node being referenced.
	NodeSubkind string `protobuf:"bytes,3,opt,name=node_subkind,json=nodeSubkind,proto3" json:"node_subkind,omitempty"`
	// The local identifier for the node.
	BaseName string `protobuf:"bytes,4,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	// The fully qualified identifier for the node.
	QualifiedName string `protobuf:"bytes,5,opt,name=qualified_name,json=qualifiedName,proto3" json:"qualified_name,omitempty"`
}

func (m *FindReply_Match) Reset()                    { *m = FindReply_Match{} }
func (m *FindReply_Match) String() string            { return proto.CompactTextString(m) }
func (*FindReply_Match) ProtoMessage()               {}
func (*FindReply_Match) Descriptor() ([]byte, []int) { return fileDescriptorIdentifier, []int{1, 0} }

func (m *FindReply_Match) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *FindReply_Match) GetNodeKind() string {
	if m != nil {
		return m.NodeKind
	}
	return ""
}

func (m *FindReply_Match) GetNodeSubkind() string {
	if m != nil {
		return m.NodeSubkind
	}
	return ""
}

func (m *FindReply_Match) GetBaseName() string {
	if m != nil {
		return m.BaseName
	}
	return ""
}

func (m *FindReply_Match) GetQualifiedName() string {
	if m != nil {
		return m.QualifiedName
	}
	return ""
}

func init() {
	proto.RegisterType((*FindRequest)(nil), "kythe.proto.FindRequest")
	proto.RegisterType((*FindReply)(nil), "kythe.proto.FindReply")
	proto.RegisterType((*FindReply_Match)(nil), "kythe.proto.FindReply.Match")
}
func (m *FindRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if len(m.Corpus) > 0 {
		for _, s := range m.Corpus {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Languages) > 0 {
		for _, s := range m.Languages {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *FindReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIdentifier(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FindReply_Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindReply_Match) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ticket) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.Ticket)))
		i += copy(dAtA[i:], m.Ticket)
	}
	if len(m.NodeKind) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.NodeKind)))
		i += copy(dAtA[i:], m.NodeKind)
	}
	if len(m.NodeSubkind) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.NodeSubkind)))
		i += copy(dAtA[i:], m.NodeSubkind)
	}
	if len(m.BaseName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.BaseName)))
		i += copy(dAtA[i:], m.BaseName)
	}
	if len(m.QualifiedName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIdentifier(dAtA, i, uint64(len(m.QualifiedName)))
		i += copy(dAtA[i:], m.QualifiedName)
	}
	return i, nil
}

func encodeFixed64Identifier(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Identifier(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIdentifier(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FindRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	if len(m.Corpus) > 0 {
		for _, s := range m.Corpus {
			l = len(s)
			n += 1 + l + sovIdentifier(uint64(l))
		}
	}
	if len(m.Languages) > 0 {
		for _, s := range m.Languages {
			l = len(s)
			n += 1 + l + sovIdentifier(uint64(l))
		}
	}
	return n
}

func (m *FindReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovIdentifier(uint64(l))
		}
	}
	return n
}

func (m *FindReply_Match) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	l = len(m.NodeKind)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	l = len(m.NodeSubkind)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	l = len(m.BaseName)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	l = len(m.QualifiedName)
	if l > 0 {
		n += 1 + l + sovIdentifier(uint64(l))
	}
	return n
}

func sovIdentifier(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdentifier(x uint64) (n int) {
	return sovIdentifier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FindRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corpus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corpus = append(m.Corpus, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Languages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Languages = append(m.Languages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &FindReply_Match{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindReply_Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSubkind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSubkind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifiedName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifiedName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentifier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentifier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdentifier
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdentifier
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdentifier(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdentifier = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentifier   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kythe/proto/identifier.proto", fileDescriptorIdentifier) }

var fileDescriptorIdentifier = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0xef, 0x50, 0xe0, 0xde, 0x9e, 0x5e, 0x4d, 0x9c, 0x05, 0x69, 0x90, 0x54, 0x24, 0x31,
	0x61, 0x55, 0x22, 0x26, 0xc6, 0xb5, 0x0b, 0x13, 0x63, 0x70, 0x51, 0x1e, 0x80, 0x94, 0xce, 0xb1,
	0x4c, 0x68, 0x67, 0xa0, 0x33, 0x25, 0xe1, 0x4d, 0xdc, 0xfb, 0x32, 0x2e, 0x7d, 0x04, 0x83, 0x2b,
	0xdf, 0xc2, 0xcc, 0x14, 0x81, 0x05, 0xab, 0xe6, 0x7c, 0xff, 0x77, 0xd2, 0x33, 0x3f, 0x74, 0xe6,
	0x6b, 0x3d, 0xc3, 0xc1, 0xa2, 0x90, 0x5a, 0x0e, 0x38, 0x43, 0xa1, 0xf9, 0x0b, 0xc7, 0x22, 0xb4,
	0x80, 0x7a, 0x36, 0xad, 0x86, 0x5e, 0x02, 0xde, 0x03, 0x17, 0x2c, 0xc2, 0x65, 0x89, 0x4a, 0xd3,
	0x00, 0x60, 0xef, 0xfb, 0xa4, 0x4b, 0xfa, 0x6e, 0x74, 0x40, 0x68, 0x0b, 0x9a, 0x89, 0x2c, 0x16,
	0xa5, 0xf2, 0x6b, 0x5d, 0xa7, 0xef, 0x46, 0xdb, 0x89, 0x76, 0xc0, 0xcd, 0x62, 0x91, 0x96, 0x71,
	0x8a, 0xca, 0x77, 0x6c, 0xb4, 0x07, 0xbd, 0x6f, 0x02, 0x6e, 0xf5, 0x97, 0x45, 0xb6, 0xa6, 0xb7,
	0xf0, 0x37, 0x8f, 0x75, 0x32, 0x43, 0xe5, 0x93, 0xae, 0xd3, 0xf7, 0x86, 0x9d, 0xf0, 0xe0, 0xa2,
	0x70, 0x27, 0x86, 0x23, 0x63, 0x45, 0xbf, 0x72, 0xfb, 0x8d, 0x40, 0xc3, 0x22, 0x73, 0x85, 0xe6,
	0xc9, 0x1c, 0xf5, 0xf6, 0xc2, 0xed, 0x44, 0xcf, 0xc1, 0x15, 0x92, 0xe1, 0x64, 0xce, 0x05, 0xf3,
	0x6b, 0x36, 0xfa, 0x67, 0xc0, 0x13, 0x17, 0x8c, 0x5e, 0xc2, 0x7f, 0x1b, 0xaa, 0x72, 0x6a, 0x73,
	0xc7, 0xe6, 0x9e, 0x61, 0xe3, 0x0a, 0x99, 0xfd, 0x69, 0xac, 0x70, 0x22, 0xe2, 0x1c, 0xfd, 0x7a,
	0xb5, 0x6f, 0xc0, 0x73, 0x9c, 0x23, 0xbd, 0x82, 0xd3, 0x65, 0x19, 0x67, 0xa6, 0x07, 0x56, 0x19,
	0x0d, 0x6b, 0x9c, 0xec, 0xa8, 0xd1, 0x86, 0x23, 0x38, 0x7b, 0xdc, 0xf5, 0x35, 0xc6, 0x62, 0xc5,
	0x13, 0xa4, 0x77, 0x50, 0x37, 0xcf, 0xa2, 0xfe, 0x91, 0x97, 0xda, 0xe2, 0xdb, 0xad, 0xe3, 0x1d,
	0xdc, 0x5f, 0xbf, 0x6f, 0x02, 0xf2, 0xb1, 0x09, 0xc8, 0xe7, 0x26, 0x20, 0xaf, 0x5f, 0xc1, 0x1f,
	0xb8, 0x48, 0x64, 0x1e, 0xa6, 0x52, 0xa6, 0x19, 0x86, 0x0c, 0x57, 0x5a, 0xca, 0x4c, 0x1d, 0x2e,
	0x4f, 0x9b, 0xf6, 0x73, 0xf3, 0x13, 0x00, 0x00, 0xff, 0xff, 0x79, 0xc8, 0x14, 0x35, 0x06, 0x02,
	0x00, 0x00,
}
