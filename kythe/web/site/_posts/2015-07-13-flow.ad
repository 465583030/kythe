---
title: Indexing JavaScript with Flow, part one
author: zarko
layout: post
---

This is the first post in a series in which we'll show how to build
cross-references for JavaScript source code using http://flowtype.org/[Flow].

In future episodes we'll add more semantic information to the graph and look at
making cross-module references. Since most interesting JavaScript code needs to
make use of its hosting environment, we'll concentrate on https://nodejs.org/[node.js]
and https://www.npmjs.com/[npm] modules. Since these are already
well-supported by Flow, we can focus on the interface between Kythe and
an established semantic tool. We hope that these tutorial posts will be useful
for those interested in adding Kythe support to their own programming tools.

== Prerequisites

Flow is written in http://ocaml.org/[OCaml] and uses
https://ocaml.org/learn/tutorials/ocamlbuild/[ocamlbuild] to build itself.
While we do maintain a checkout of Flow in Kythe's `third_party` directory,
we don't build it as part of our standard set of targets; this way, people who
aren't interested in JavaScript won't have to install an OCaml environment
to use other Kythe tools.

You can check to see if you have a compatible OCaml installed by running
`ocaml -version`:

[source,bash]
----
$ ocaml -version
----
[role=output]
----
The OCaml toplevel, version 4.01.0
----

With a sufficiently recent OCaml, you should be able to compile Flow (with
the Kythe support we'll describe below) by, starting in your Kythe root:

[source,bash]
----
cd third_party/flow
make
bin/flow dump-kythe --help
----
[role=output]
----
Usage: flow dump-kythe [OPTION]... [FILE]
----

== Bootstrapping Kythe support

To get started, let's write a script `kythe-browse.sh` that will turn a stream
of JSON-formatted Kythe entries into a format that our example code browser
can read. Put it in your Kythe root; it will clobber the directories
`//graphstore` and `//tables`.

[source,bash]
----
#!/bin/bash -e
set -o pipefail
BROWSE_PORT="${BROWSE_PORT:-8080}"
# You can find prebuilt binaries at https://github.com/google/kythe/releases.
# This script assumes that they are installed to /opt/kythe.
# If you build the tools yourself or install them to a different location,
# make sure to pass the correct public_resources directory to http_server.
rm -f -- graphstore/* tables/*
mkdir -p graphstore tables
# Read JSON entries from standard in to a graphstore.
/opt/kythe/tools/entrystream --read_json \
  | /opt/kythe/tools/write_entries -graphstore graphstore
# Convert the graphstore to serving tables.
/opt/kythe/tools/write_tables -graphstore graphstore -out=tables
# Host the browser UI.
/opt/kythe/tools/http_server -serving_table tables \
  -public_resources="/opt/kythe/web/ui" \
  -listen="localhost:${BROWSE_PORT}"
----

You can test this with a very short entry stream. The only tricky part here is
that Kythe fact values, when serialized to JSON, are base64-encoded. This
ensures that they can be properly deserialized later, since fact values may
contain arbitrary binary data, but JSON strings permit only UTF-8 characters.
`ZmlsZQ==` is `file` and `SGVsbG8sIHdvcmxkIQ==` is `Hello, world!`.

[source,bash]
----
echo '
{"source":{"corpus":"example","path":"/hello","language":"js"},
 "fact_name":"/kythe/node/kind","fact_value":"ZmlsZQ=="}
{"source":{"corpus":"example","path":"/hello","language":"js"},
 "fact_name":"/kythe/text","fact_value":"SGVsbG8sIHdvcmxkIQ=="}
' | ./kythe-browse.sh
----

You can check that http://localhost:8080/#/hello?language=js&corpus=example&signature
shows `Hello, world!'.

Now that we have a way of getting data into Kythe, we can concentrate on
extracting those data from Flow. 

== Dumping Flow information

If you want to follow along, we'll be talking about the version of the source
file https://github.com/google/kythe/blob/5366105b457da219ebf8a017aece890dea9d9115/kythe/ocaml/js_indexer/dumpKytheService_js.ml[`//kythe/ocaml/js_indexer/dumpKytheService_js.ml`] that was committed
along with this blog post. Future posts will follow the indexer as it develops.

Flow usually runs in two parts. The first starts up in the background and
does the heavy lifting involved with making sense of JavaScript programs.
This stays resident until it's terminated. The second part will start up the
Flow service if it's not already started; it will then issue a query to the
background task, collect the results, return them and exit. The code for the
`dump-kythe` client is in https://github.com/google/kythe/blob/5366105b457da219ebf8a017aece890dea9d9115/kythe/ocaml/js_indexer/dumpKytheCommand.ml[`//kythe/ocaml/js_indexer/dumpKytheCommand.ml`], but
we won't be looking at that again here.

While we can use Flow's builtin support for JSON serialization, we still need
to build a Kythe subgraph in OCaml. For this, we need to model two basic types.
The first, called a http://www.kythe.io/docs/kythe-storage.html#_a_id_termvname_a_vector_name_strong_vname_strong[VName],
uniquely picks out a node in the graph. VNames have five string-valued fields.
http://www.kythe.io/docs/kythe-storage.html#_entry[Entries]
record both facts about individual nodes and edges between them. As described in
the documentation, we only need to emit the forward versions of edges (those
that are described in the http://www.kythe.io/docs/schema[schema]); the Kythe
pipeline takes care of generating reverse edges.

We'll encode VNames and entries in a straightforward way; in particular, we
represent entries as five-tuples, where the target's presence or absence
determines if the entry represents an edge between nodes or a fact about
a single node (respectively). Our `fact` and `edge` convenience functions
also assume that all of the fact and edge names we'll use are underneath the
`/kythe` prefix, but this isn't required by the model.

[source,ocaml]
----
type vname = {
  signature: string;
  path: string;
  language : string;
  root: string;
  corpus: string;
}
let null_vname =
    { signature = ""; path = ""; language = ""; root = ""; corpus = "" }
let js_vname =
    { signature = ""; path = ""; language = "js"; root = ""; corpus = "" }

type entry = (vname * string * vname option * string * string)

let fact node fact_name fact_val =
    (node, "", None, "/kythe/" ^ fact_name, fact_val)
let edge src edge_name tgt =
    (src, "/kythe/edge/" ^ edge_name, Some tgt, "/", "")
----

We can convert these types to JSON with `json_of_vname` and `json_of_entry`.
Remember that we must base64-encode Kythe fact values.

[source,ocaml]
----
let json_of_vname vname =
  JAssoc [
      ("signature", JString vname.signature);
      ("path", JString vname.path);
      ("corpus", JString vname.corpus);
      ("root", JString vname.root);
      ("language", JString vname.language)
  ]

let json_of_entry (src, edge, tgt, fname, fval) =
  let assocs = [
      ("source", json_of_vname src);
      ("edge_kind", JString edge);
      ("fact_name", JString fname);
      ("fact_value", JString (B64.encode fval))
  ] in
  match tgt with
  | None -> JAssoc assocs
  | Some v -> JAssoc (("target", json_of_vname v) :: assocs)
----

Our Flow command `dump-kythe` will take a Flow file input and build a list of
these JSON entries.

=== File content

Kythe stores file content in its graph. The `http_server` binary used in our
`kythe-browse.sh` script doesn't look in your filesystem for a file to present
to the Web browser; it instead reads the `text` property off of a graph node.

Since every node in the graph has a VName, we'll need to be able to build one
for any source file Flow might refer to. Here's a simple example of how to do
this for some path:

[source,ocaml]
----
let vname_of_path path =
  let info = Module_js.get_module_info path in
  { signature = ""; path = path; language = "js"; root = "";
    corpus = info.Module_js._module }
----

This `vname_of_path` chooses the `corpus` field based on the name of the module
with which `path` is associated. You'll probably want this to be more
configurable. For example, other Kythe indexers use a `vnames.json` file to
choose the VName fields based on regular expressions over paths.

Kythe graph nodes should also have a `node/kind` fact. For files, this kind is
`file`. We'll therefore expect to emit two basic facts for each file we index:

[source,ocaml]
----
(fact (vname_of_path path) "text" file_content)
(fact (vname_of_path path) "node/kind" "file")
----

You can see the JSON representation of the resulting entries above, where we
used them to test the `kythe-browse.sh` script.

=== Cross-references

Flow provides hooks to intercept various kinds of identifier lookup
that it performs while analyzing a file. We can use these hooks to build a
table that maps the source text range of a reference to the source text range
of that reference's definition. Later, we'll go one step further and record
inferred type information for calls and member references, but we won't
use those directly in this post.

We install our hooks before calling Flow's `typecheck_contents` function:

[source,ocaml]
----
  Type_inference_hooks_js.set_id_hook (id_hook table);
  Type_inference_hooks_js.set_member_hook (member_hook table);
  Type_inference_hooks_js.set_call_hook (call_hook table);
----

and then pass `table` along with information about the source file to a function
called  `dump_xrefs`, which first emits file content as described in the
previous section. Once that's done, `dump_xrefs` looks through the reference
table for all of the references that type inference can connect to a probable
definition site. Since we're only concerned right now about linking
references to definitions, this `finalize_ref` function just returns a tuple
of the binding name, the reference location, and the definition location.

Now that we have a stream of name-ref-def tuples, we can emit the relevant
Kythe nodes and edges. First off, we'll need a way to uniquely refer to ranges
of source text. We define a function `path_anchor_vname` that returns a
VName for a range's corresponding http://www.kythe.io/docs/schema#anchor[anchor]
node as well as the VName for the range's containing file (via `vname_of_path`).
We'll use this to write another function called `anchor` that emits the relevant
facts and edges concerning that text range:

[source,ocaml]
----
let anchor (p:Loc.t) es =
  match path_anchor_vname p with
  | None -> (es, None)
  | Some (path_vname, vname) ->
    let start = p.Loc.start.Loc.offset in
    let _end = p.Loc._end.Loc.offset in
    (json_of_entry (fact vname "node/kind" "anchor") ::
     json_of_entry (fact vname "loc/start" (string_of_int start)) ::
     json_of_entry (fact vname "loc/end" (string_of_int _end)) ::
     json_of_entry (edge vname "childof" path_vname) :: es, Some vname)
----

For each name-ref-def tuple we get from `finalize_ref`, we'll use `anchor` to
build anchors and anchor VNames for the reference and definition sites. Now
all that's left is to link these together with edges. The schema documents
that http://www.kythe.io/docs/schema#ref[ref] edges and
http://www.kythe.io/docs/schema#defines[defines] edges should point to semantic
nodes. At this point in our development, we can simply write out facts about
a stub node (which we'll give the kind `js/todo`--we can invent these at will).
If we assume (for the moment) that only one semantic object with a particular
name can be defined at a particular location, then we can construct a unique
VName for that object by manipulating the VName of its definition site's anchor.
(Recall that the VName of an anchor uniquely refers to some text range.)

Putting it all together, we see that for each `(name, use_loc, def_loc)` tuple,
we perform the following:

[source,ocaml]
----
let (es, use_vname') = anchor use_loc es in
let (es, def_vname') = anchor def_loc es in
match (use_vname', def_vname') with
| (Some use_vname, Some def_vname) ->
  let def_tgt =
    { def_vname with signature = name ^ "#" ^ def_vname.signature } in
  json_of_entry (edge use_vname "ref" def_tgt) ::
  json_of_entry (edge def_vname "defines" def_tgt) ::
  json_of_entry (fact def_tgt "node/kind" "js/todo") :: es
(* Ignore those cases where the locations are invalid. *)
| _ -> es
----

You can check on the results by running Flow on one of its example files:

[source,bash]
----
./third_party/flow/bin/flow dump-kythe \
    third_party/flow/examples/01_HelloWorld/answer/hello.js | ./kythe-browse.sh
----

Observe that the call to `foo(10)` is linked to the function definition of `foo`
and that the parameter `x` of `foo` is linked to its use in `return x*10;`.
If you inspect `x` or `foo`, you can see that they have the node kind `js/todo`.

== Future work

We're writing out a lot of duplicate `defines` edges (one per reference). 
`js/todo` is not a very helpful node kind. We haven't emitted any type
information, either, and navigating absolute paths to JavaScript files is at
the least inconvenient. We'll look at addressing these issues in future posts
(and Git commits!).

For now, we've seen that with just a little bit of work, we can quickly spin
up an indexer for a previously unsupported language like JavaScript with only
a little bit of scripting and JSON. You can even build a Kythe graph with
`echo`. Once the graph has been built, it can be queried through the Web
interface, via our command-line tools, or programmatically via RPCs.
